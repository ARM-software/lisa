#! /usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2019, Arm Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import shlex
import argparse
import subprocess
import sys
from collections.abc import Mapping
import tempfile
from pathlib import Path
import datetime
import shutil
import functools
import textwrap
import logging
import contextlib

from lisa.conf import SimpleMultiSrcConf, KeyDesc, LevelKeyDesc, TopLevelKeyDesc
from lisa.generic import TypedList

def info(msg):
    logging.info(msg)

def warn(msg):
    logging.warning(msg)

class BatchRebaseManifest(SimpleMultiSrcConf):
    """
    Configuration of batch-rebase

    {generated_help}
    """
    STRUCTURE = TopLevelKeyDesc('rebase-conf', 'Batch rebase configuration', (
        KeyDesc('topics', 'List of topics. Each topic is described by a mapping with "name", "remote", "base" and "tip" git references keys. Also, a tag can be added between topics with "action: tag" key and "name: tag-name".', [list]),
        KeyDesc('remotes', 'Git remotes. Keys are remote name, values are a mapping with an "url" key', [Mapping]),
        KeyDesc('rr-cache', 'Path to git rr-cache. Relative paths are relative to that manifest file', [str]),
        LevelKeyDesc('base', 'Base branche spec', [
            KeyDesc('remote', 'remote where the base branch is located', [str]),
            KeyDesc('ref', 'Name of the base branch', [str]),
        ]),
        LevelKeyDesc('resume', 'Internal state used for resuming after a conflict', [
            KeyDesc('conflict-topic', 'Topic where the conflict happened', [str]),
            KeyDesc('persistent-refs', 'List of references that needs to be pushed back to the main repo', [TypedList[str]]),
            LevelKeyDesc('tags', 'Topic branch tags', [
                KeyDesc('persistent', 'whether tags should be pushed back or not', [bool]),
                KeyDesc('suffix', 'suffix to use for tags, or None', [str]),
            ]),
            KeyDesc('repo', 'Path to the main repo', [str]),
            KeyDesc('branch', 'Branch that is being created', [str]),
            KeyDesc('rr-cache', 'Source of the rr-cache', [str]),
        ])
    ))

RESUME_MANIFEST_NAME = '.batch-rebase-state'

def call_git(git_args, silent=False, capture=False):
    git_args = [str(arg) for arg in git_args]

    cmd = ('git', *git_args)
    info(' '.join(shlex.quote(x) for x in cmd))
    if capture:
        def run(cmd):
            return subprocess.check_output(
                cmd,
                stderr=subprocess.STDOUT,
                encoding='utf-8',
                universal_newlines=True,
            )
    else:
        if silent:
            stdout = subprocess.DEVNULL
        else:
            stdout = None
        stderr = stdout
        def run(cmd):
            return subprocess.check_call(cmd, stdout=stdout, stderr=stderr)

    return run(cmd)

def make_git_func(repo):
    """
    Make a function calling git on a specific repo
    """
    @functools.wraps(call_git)
    def wrapper(git_args, *args, **kwargs):
        return call_git(['-C', repo, *git_args], *args, **kwargs)

    return wrapper

def copy_content(src, dst):
    """
    Copy content of src folder to dst, overwriting files with the same name.
    """
    for path in src.rglob('*'):
        if path.is_dir():
            continue
        dst_path = dst/path.relative_to(src)
        dst_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(
            str(path),
            str(dst_path)
        )

def has_unresolved(repo):
    git = make_git_func(repo)
    try:
        git(['diff', '--quiet', '--name-only', '--diff-filter=U'], silent=True)
    except subprocess.CalledProcessError:
        return True
    else:
        return False

def empty_staging_area(repo):
    git = make_git_func(repo)
    try:
        git(['diff', '--quiet', '--exit-code', '--cached'])
    except subprocess.CalledProcessError:
        return False
    else:
        return True

def do_create(conf_folder, repo, temp_repo, new_branch, conf, persistent_tags, tags_suffix):
    # Use --shared to avoid copying the git objects, so we only pay for a
    # checkout
    call_git(['clone', '--shared', repo, temp_repo])

    # From now on, only act on the temp repo
    git = make_git_func(temp_repo)

    # rr-cache
    rr_cache = Path(conf['rr-cache'])
    if not rr_cache.is_absolute():
        rr_cache = conf_folder/rr_cache
    rr_cache = rr_cache.resolve()

    git_config = {
        'rerere.enabled': 'true',
        'rerere.autoupdate': '99999',
        'gc.rerereUnresolved': '99999',
    }

    for opt, val in git_config.items():
        git(['config', opt, val], silent=True)

    # Copy the rr-cache content
    copy_content(rr_cache, temp_repo/'.git'/'rr-cache')

    # Add all relevant remotes and fetch them
    conf['remotes']['localrepo'] = {
        'url': repo,
    }
    for name, remote in conf['remotes'].items():
        git(['remote', 'add', name, remote['url']])

    # Create the new branch at the beginning of the cherry picking session
    base = conf['base']
    git(['fetch', base['remote'], base['ref']])
    git(['checkout', '-b', new_branch, 'FETCH_HEAD'])

    # Start cherry picking topics
    return do_cherry_pick(repo, temp_repo, conf, persistent_tags, tags_suffix, new_branch, rr_cache)

def do_resume(temp_repo, conf):
    repo = conf['resume']['repo']
    persistent_tags = conf['resume']['tags']['persistent']
    tags_suffix = conf['resume']['tags']['suffix']
    branch = conf['resume']['branch']
    rr_cache = Path(conf['resume']['rr-cache'])

    try:
        return do_cherry_pick(repo, temp_repo, conf, persistent_tags, tags_suffix, branch, rr_cache)
    # If there was an error, make sure we do not delete the temp repo
    except subprocess.CalledProcessError:
        return (False, True)

def do_cherry_pick(repo, temp_repo, conf, persistent_tags, tags_suffix, branch, rr_cache):
    has_conflict, persistent_refs = _do_cherry_pick(temp_repo, conf, persistent_tags, tags_suffix)

    if has_conflict:
        conf['resume'].add_src('conflict', {
            'repo': str(repo),
            'rr-cache': str(rr_cache),
            'branch': branch,
        })
        # Save the augmented manifest for later resumption
        conf.to_yaml_map(temp_repo/RESUME_MANIFEST_NAME)
    else:
        # Copy back the rr-cache
        copy_content(temp_repo/'.git'/'rr-cache', rr_cache)

        # Push back the persistent references
        persistent_refs.add(branch)
        joiner = '\n\t* '
        info('Will save the following refs:{}{}'.format(
            joiner,
            joiner.join(sorted(persistent_refs)),
        ))
        for ref in persistent_refs:
            call_git(['-C', temp_repo, 'push', '-f', repo, ref])

    return (not has_conflict, 1 if has_conflict else 0)


def _do_cherry_pick(repo, conf, persistent_tags, tags_suffix):
    git = make_git_func(repo)

    def add_tag(name, prefix='topic-', suffix=tags_suffix):
        tag_name = '{prefix}{name}{suffix}'.format(
            name=name,
            prefix=prefix,
            suffix='-{}'.format(suffix) if suffix else '',
        )
        # Force create the tag
        git(['tag', '-f', tag_name])
        return tag_name

    persistent_refs = set()
    topics = conf['topics']

    # If we are resuming after a conflict
    if 'conflict-topic' in conf['resume']:
        resume_topic = conf['resume']['conflict-topic']
        persistent_refs.update(conf['resume']['persistent-refs'])

        # Check that everything was committed
        try:
            git(['diff-index', '--quiet', 'HEAD', '--'])
        except subprocess.CalledProcessError:
            info('Please commit all files before running batch-rebase resume')
            return (True, persistent_refs)

        # Finish cherry picking the topic with the conflict.
        # If the commit was the last in the topic, this will fail as the `git
        # commit` issued by the user finished the cherry-picking session.
        with contextlib.suppress(subprocess.CalledProcessError):
            git(['cherry-pick', '--continue'])

        tag_name = add_tag(resume_topic)
        persistent_refs.add(tag_name)

        # Skip the topics that were already create successfully
        for i, topic in enumerate(topics):
            if topic['name'] == resume_topic:
                break
        try:
            topics = topics[i + 1:]
        except IndexError:
            topics = []

    # Cherry pick topic branches in the specified order
    for topic in topics:
        action = topic.get('action', 'cherry-pick')
        name = topic['name']

        if action == 'tag':
            suffix = topic.get('suffix', tags_suffix)
            tag_name = add_tag(name, prefix='', suffix=suffix)
            info('Added a tag: {}'.format(tag_name))
            persistent_refs.add(tag_name)

        elif action == 'cherry-pick':
            base = topic['base']
            tip = topic['tip']
            remote = topic['remote']

            # Fetch the topic base and tip
            for ref in (base, tip):
                git(['fetch', remote, ref])

            range_ref = 'refs/remotes/{remote}/{base}..refs/remotes/{remote}/{tip}'.format(
                remote=remote,
                base=base,
                tip=tip
            )

            nr_commits = int(
                git(['rev-list', '--count', range_ref], capture=True)
            )
            info('Cherry-picking topic "{name}" from {remote} ({nr_commits} commits)\nremote: {remote}\nbase: {base}\ntip: {tip}\n'.format(
                name=name,
                remote=remote,
                base=base,
                tip=tip,
                nr_commits=nr_commits,
            ))


            if not cherry_pick_ref(repo, range_ref):
                # Save the current state for later resumption
                conf['resume'].add_src(
                    'conflict',
                    {
                        'conflict-topic': name,
                        'persistent-refs': sorted(persistent_refs),
                        'tags': {
                            'persistent': persistent_tags,
                            'suffix': tags_suffix,
                        }
                    },
                )
                info(textwrap.dedent("""
                    A conflict occured while cherry-picking topic "{topic}" ({range_ref})
                    In order to fix it, please:
                        1. Resolve the conflict in:
                        {repo}
                        Make sure modified files are committed.

                        2. Run:
                        batch-rebase resume {repo}
                    """.format(
                        topic=name,
                        repo=repo,
                        range_ref=range_ref,
                    )).strip())
                return (True, persistent_refs)

            tag_name = add_tag(name)
            if persistent_tags:
                persistent_refs.add(tag_name)

        else:
            raise ValueError('Unknown action: {}'.format(action))

    return (False, persistent_refs)


def cherry_pick_ref(repo, ref):
    git = make_git_func(repo)
    try:
        git(['cherry-pick', ref])
    # There is a conflict
    except subprocess.CalledProcessError:
        # Let Git rerere do its job
        return rerere_autocommit(repo)

    return True

def rerere_autocommit(repo):
    git = make_git_func(repo)
    while True:
        # If there is an unsolvable conflict, bail out
        if has_unresolved(repo):
            return False
        # If rerere did its job, commit and carry on
        else:
            if empty_staging_area(repo):
                # If the commit would be empty, just skip it
                curr_sha1 = git(['rev-list', '-n1', 'CHERRY_PICK_HEAD'], capture=True).decode()
                warn('Empty commit, skipping it: {}'.format(curr_sha1))
                git(['reset'])
            else:
                info('Git rerere supplied solution, carrying on')
                git(['commit', '--no-edit'])

        try:
            git(['cherry-pick', '--continue'])
        except subprocess.CalledProcessError:
            # If there is no cherry-pick in progress, just exit the loop
            try:
                git(['rev-parse', '--verify', '--quiet', 'CHERRY_PICK_HEAD'])
            except subprocess.CalledProcessError:
                break
            else:
                continue
        else:
            break

    return True

def main():
    logging.basicConfig(
        level=logging.INFO,
        format='[%(levelname)s]  %(message)s'
    )

    parser = argparse.ArgumentParser(description=textwrap.dedent(
    '''
    DESCRIPTION

        Create a git branch by rebasing a series of other branches on top of
        each other.

        Git rerere is enabled and used automatically when possible.
        The remote "localrepo" can be used to get a branch that is not actually
        on a remote.

        Note: All the operations are carried out in a temporary git repository
        that is cloned using git clone --shared. That means it will not touch
        the staging area of the original repository. If anything goes wrong,
        deleting the temporary repository is enough to wipe everything for a
        fresh start.

    CONFLICT RESOLUTION

        When a conflict cannot be solved by git rerere alone, batch-rebase will
        give instructions to follow.

    MANIFEST

        The manifest is a YAML file following that structure:

        {manifest_doc}

    EXAMPLE

        rebase-conf:
            # relative paths are relative to the manifest file
            rr-cache: ./rr-cache
            base:
                remote: localrepo
                ref: sched/core

            topics:
                -
                    name: foo
                    remote: myremote
                    base: mybase
                    tip: mytip

               # Add a tag between topics
                -
                    action: tag
                    name: mytag

                -
                    name: bar
                    remote: myremote
                    base: mybase2
                    tip: mytip2


            remotes:
                tip:
                    url: git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git
                arm-power:
                    url: git://linux-arm.org/linux-power.git


        ''').format(manifest_doc=BatchRebaseManifest.get_help()),
        formatter_class=argparse.RawDescriptionHelpFormatter,

    )

    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')
    create_parser = subparsers.add_parser('create',
        help='Create a branch'
    )
    resume_parser = subparsers.add_parser('resume',
        help='Resume creation after resolving a conflict'
    )

    # Common optiosn
    for subparser in (create_parser, resume_parser):
        subparser.add_argument('GIT_TREE',
            help='Git tree to work on',
        )

        subparser.add_argument('--keep-temp', action='store_true',
            help='Keep the temporary git repo instead of removing it when the cherry picking is finished'
        )

        subparser.add_argument('--delete-temp', action='store_true',
            help='Always delete the temporary git repo, even when there is a cherry pick conflict.'
        )

    # Create options
    create_parser.add_argument('--manifest', required=True,
        help='Config file'
    )

    create_parser.add_argument('--create-branch', required=True,
        help='Name of the new branch to create'
    )

    create_parser.add_argument('--tags', action='store_true',
        help='Create a tag per topic'
    )

    create_parser.add_argument('--tags-suffix',
        default=datetime.datetime.now().strftime("%Y%m%d"),
        help='Replace the default tag suffix (current date)'
    )

    args = parser.parse_args()
    repo = Path(args.GIT_TREE).resolve()
    keep_temp = args.keep_temp

    ret = 0
    delete_temp_repo = True
    temp_repo = None
    try:
        if args.subcommand == 'create':
            conf = BatchRebaseManifest.from_yaml_map(args.manifest)
            new_branch = args.create_branch
            persistent_tags = args.tags
            tags_suffix = args.tags_suffix

            # Make sure we use resolved absolute path
            conf_folder = Path(args.manifest).parent
            temp_repo = Path(tempfile.mkdtemp())
            delete_temp_repo, ret = do_create(
                conf_folder,
                repo, temp_repo,
                new_branch,
                conf,
                persistent_tags, tags_suffix,
            )

            if args.delete_temp:
                info('Deleting temporary clone as requested with --delete-temp')
                delete_temp_repo = True

        elif args.subcommand == 'resume':
            temp_repo = repo
            conf = BatchRebaseManifest.from_yaml_map(temp_repo/RESUME_MANIFEST_NAME)
            delete_temp_repo, ret = do_resume(temp_repo, conf)

    finally:
        if delete_temp_repo and temp_repo and not keep_temp:
            shutil.rmtree(str(temp_repo))

    return ret

if __name__ == '__main__':
    sys.exit(main())

# vim :set tabstop=4 shiftwidth=4 textwidth=80 expandtab
