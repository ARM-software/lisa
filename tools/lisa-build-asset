#! /usr/bin/env python3

import argparse
import subprocess
import os
import tempfile
import shutil
import sys
from contextlib import nullcontext, contextmanager
from shlex import quote
from pathlib import Path
import copy

from lisa._kmod import make_alpine_chroot
from lisa._unshare import ensure_root
from lisa.utils import setup_logging, LISA_HOME, LISA_HOST_ABI

ARCHITECTURES = ['arm64', 'armeabi', 'x86_64', 'x86', 'ppc64le']

# Arch names usued by qemu.
QEMU_ARCH_NAMES = {
    'arm64': 'aarch64',
    'armeabi': 'armv7'
}

TRIPLETS = {
    'armeabi': 'arm-linux-gnueabi-',
    'arm64': 'aarch64-linux-gnu-',
    'x86_64': 'x86_64-linux-gnu-',
    'x86': 'x86-linux-gnu-',
    'ppc64le': 'ppc64le-linux-gnu-',
}

def get_used_env_var(recipe, env):
    # Parse the recipe, searching for env variables actually used.
    with open(recipe) as f:
        recipe_content = f.read()

    return {
        var
        for var in env.keys()
        if var in recipe_content
    }

def get_env(asset=None, arch=None, host_arch=None, build_dir=None, cross_compile=None, recipe=None, use_musl=False, build_env=None):
    # Set of env var "leaking" into the build environment. Controlling this set
    # ensures reproducible builds that do not depend on user setup.
    leaked = {'PATH'}
    env = {
        var: val
        for var, val in os.environ.items()
        if var.startswith('LISA_') or var in leaked
    }

    env.update({
        'ARCH': arch,
        'LISA_ASSET': asset,
        'LISA_ASSET_RECIPE': recipe,
        'LISA_ARCH_ASSETS': os.path.join(LISA_HOME, 'lisa', '_assets', 'binaries', arch),
        'BUILD_DIR': build_dir.resolve() if build_dir is not None else None,
        'CROSS_COMPILE': cross_compile or None,
        'CONFIGURE_HOST': os.path.basename(cross_compile.rstrip('-')) if cross_compile else None,
        'CONFIGURE_BUILD': TRIPLETS[host_arch],
        'USE_MUSL_LIB': '1' if use_musl else None,
        'LISA_BUILD_ENV': build_env,
    })

    env = {
        var: val
        for var, val in env.items()
        if val is not None
    }

    env['LISA_ASSET_RECIPE_USED_ENV'] = ' '.join(sorted(get_used_env_var(recipe, env)))

    return env

def list_assets(recipe_dir):
    recipes = os.listdir(recipe_dir)
    return sorted(
        os.path.splitext(script)[0]
        for script in recipes
        if script.endswith('.recipe')
    )

def get_recipe_name(asset):
    return f'{asset}.recipe'

def get_asset_recipe(asset, recipe_dir):
    return recipe_dir / get_recipe_name(asset)

def get_asset_property(asset, arch, property, is_array=False, **kwargs):
    # Read asset's recipe to get a property value.
    # Raise a ValueError if property is not set.
    action = f"if [ -z ${{{property}+x}} ]; then exit 1; else printf '%s\\n' ${{{property}[@]}}; fi"
    try:
        val = make(asset=asset, arch=arch, actions=[action], **kwargs, get_output=True)
    except subprocess.CalledProcessError:
        raise ValueError(f'The property "{property}" is not set.')
    val = val[action]
    if is_array:
        return [x.strip() for x in val.splitlines()]
    else:
        return val.strip()

def is_property_set(asset, arch, property, **kwargs):
    try:
        get_asset_property(asset, arch, property, **kwargs)
    except ValueError:
        return False
    else:
        return True


@contextmanager
def make_chroot(asset, arch, host_arch, build_dir, recipe_dir, arch_chroot_dir, build_env):
    def get_prop(prop, is_array=False):
        return get_asset_property(
            asset=asset,
            arch=arch,
            host_arch=host_arch,
            property=prop,
            build_dir=build_dir,
            recipe_dir=recipe_dir,
            arch_chroot_dir=arch_chroot_dir,
            is_array=is_array,
            build_env=build_env,
        )

    try:
        alpine_dependencies = get_prop('ALPINE_BUILD_DEPENDENCIES', is_array=True)
    except ValueError:
        alpine_dependencies = []

    alpine_version = get_prop('ALPINE_VERSION')

    with make_alpine_chroot(
        version=alpine_version,
        abi=arch,
        packages=alpine_dependencies,
        bind_paths={
            LISA_HOME: LISA_HOME,
            build_dir: build_dir,
        },
        overlay_backend='overlayfs',
    ) as chroot:
        try:
            yield chroot
        finally:
            pass

def chroot_cmd(cmd, env, chroot):
    _env = ' '.join(
        quote(f'{name}={val}')
        for name, val in env.items()
    )
    _cmd = ' '.join(map(quote, cmd))
    _cmd = f'source /etc/profile && {_cmd}'
    _cmd = f'/usr/bin/env {_env} sh -c {quote(_cmd)}'
    cmd = ['chroot', chroot, 'sh', '-c', _cmd]
    return cmd

def make(asset, arch, host_arch, actions, build_dir, recipe_dir, build_env, cross_compile=None, arch_chroot_dir=None, get_output=False):
    if get_output:
        # make() is sometimes expected to return the output of the 'actions'.
        # If so, use check_output() to exectute the 'actions'.
        output = dict()
        def run_cmd(action, *args, **kwargs):
            output[action] = subprocess.check_output(*args, **kwargs).decode('utf-8')
    else:
        output = None
        def run_cmd(action, *args, **kwargs):
            subprocess.check_call(*args, **kwargs)

    recipe = get_asset_recipe(asset, recipe_dir)
    env = get_env(
        asset=asset,
        arch=arch,
        host_arch=host_arch,
        build_dir=build_dir,
        recipe=recipe,
        cross_compile=cross_compile,
        use_musl=bool(arch_chroot_dir),
        build_env=build_env,
    )

    for action in actions:
        print(f'\nMaking {arch} {asset} {action} in: {build_dir}\n')

        cmd = ['bash', '-c', f'cd {build_dir} && source {recipe} && {action}']

        if arch_chroot_dir and action in ('build', 'install'):
            cmd = chroot_cmd(cmd=cmd, env=env, chroot=arch_chroot_dir)

        run_cmd(action, cmd, env=env, cwd=build_dir)

    return output

def make_asset(asset, host_arch, archs_to_make, build_dir, recipe_dir, cross_compiles=None, native_build=False, build_env='alpine'):
    if build_dir:
        # We do not want to empty an existing directory, as it might contain
        # bind mounts and deleting that recursively may end up deleting e.g.
        # LISA_HOME.
        os.makedirs(build_dir, exist_ok=False)
        cm = nullcontext(build_dir)
    else:
        cm = tempfile.TemporaryDirectory()

    with cm as build_dir:
        build_dir = Path(build_dir).resolve()
        # Download sources once for all architectures
        download_dir = build_dir / 'download'
        os.makedirs(download_dir)
        make(
            asset=asset,
            arch='any',
            host_arch=host_arch,
            actions=['download'],
            build_dir=download_dir,
            recipe_dir=recipe_dir,
            cross_compile=None,
            build_env=build_env,
        )

        # Build and install for each
        for arch in archs_to_make:
            arch_dir = build_dir / arch
            arch_build_dir = arch_dir / 'source'
            shutil.copytree(
                download_dir,
                arch_build_dir,
                symlinks=True,
                ignore_dangling_symlinks=True,
            )

            def is_prop_set(prop):
                return is_property_set(
                    asset=asset,
                    arch=arch,
                    host_arch=host_arch,
                    property=prop,
                    recipe_dir=recipe_dir,
                    build_dir=arch_build_dir,
                    build_env=build_env,
                )

            builds_on_alpine = (build_env == 'alpine') and is_prop_set('ALPINE_VERSION')
            _native_build = native_build or is_prop_set('BROKEN_CROSS_COMPILATION')

            if (not builds_on_alpine) and _native_build and host_arch != arch:
                raise ValueError(f'Cannot achieve a native build with build env {build_env} on host architecture {host_arch} for target architecture {arch}')

            if builds_on_alpine:
                arch_chroot_dir = arch_dir / 'chroot'
                chroot_cm = make_chroot(
                    asset=asset,
                    arch=arch if _native_build else host_arch,
                    host_arch=host_arch,
                    build_dir=arch_build_dir,
                    recipe_dir=recipe_dir,
                    arch_chroot_dir=arch_chroot_dir,
                    build_env=build_env,
                )
            else:
                 chroot_cm = nullcontext()

            # Native build removes the need for CROSS_COMPILE and specifying
            # the cross_compile
            cross_compile = None if _native_build else (cross_compiles or {}).get(arch)

            with chroot_cm as arch_chroot_dir:
                make(
                    asset=asset,
                    arch=arch,
                    host_arch=host_arch,
                    actions=['build', 'install'],
                    build_dir=arch_build_dir,
                    recipe_dir=recipe_dir,
                    cross_compile=cross_compile,
                    arch_chroot_dir=arch_chroot_dir,
                    build_env=build_env,
                )

def error_missing_cross_compiles(parser, missing):
    parser.error(f'Missing CROSS_COMPILE, please specify: {", ".join(f"--{arch}-cross-compile" for arch in missing)}')

@ensure_root
def main():
    recipe_dir = Path(LISA_HOME, 'tools', 'recipes')
    asset_list = list_assets(recipe_dir)

    try:
        cross_compile = os.environ['CROSS_COMPILE']
    except KeyError:
        default_cross_compiles = copy.copy(TRIPLETS)
    else:
        default_cross_compiles = {
            arch: cross_compile
            for arch in ARCHITECTURES
        }

    try:
        host_arch = LISA_HOST_ABI
    except KeyError:
        pass
    else:
        default_cross_compiles[host_arch] = ''

    parser = argparse.ArgumentParser(
        description="""
        Build LISA binary assets.

        Build recipes are available in: {recipe_dir}
        """.format(recipe_dir=recipe_dir),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('asset', help='Asset to build',
        choices=['all'] + asset_list,
    )
    parser.add_argument('--arch', help='Architecture to build for',
        default=None,
        action='append',
        choices=ARCHITECTURES + ['all'],
    )
    # Only available for a few assets
    parser.add_argument('--native-build',
        help=f'Setup a native environment to build instead of cross-compiling. Must be run as root.',
        action='store_true'
    )

    parser.add_argument('--build-env',
        help=f'Choose build environment to use',
        choices=['host', 'alpine'],
        default='alpine',
    )

    for arch in ARCHITECTURES:
        parser.add_argument(f'--{arch}-cross-compile',
            default=default_cross_compiles.get(arch),
            help=f'CROSS_COMPILE value for {arch}',
        )

    parser.add_argument("--log-level",
        default='info',
        choices=('warning', 'info', 'debug'),
        help="Verbosity level of the logs."
    )

    parser.add_argument('--build-dir', help='Build director. Defaults to temp folder. WARNING: Do not simply delete the build directory, as it contains bind mounts for the parent git repository.')
    args = parser.parse_args()

    setup_logging(level=args.log_level.upper())

    native_build = args.native_build
    build_env = args.build_env
    build_dir = Path(args.build_dir).resolve() if args.build_dir else None
    archs = ['all'] if args.arch is None else args.arch
    archs_to_make = tuple(ARCHITECTURES if 'all' in archs else archs)

    cross_compiles = {
        arch: vars(args).get(f'{arch}_cross_compile')
        for arch in ARCHITECTURES
    }

    if not native_build:
        missing = sorted(
            arch
            for arch in archs_to_make
            if cross_compiles.get(arch) is None
        )

        if missing:
            error_missing_cross_compiles(parser, missing)

    if args.asset == 'all':
        assets_to_make = asset_list
    else:
        assets_to_make = [args.asset]

    print(f'Will make {", ".join(assets_to_make)} for {", ".join(archs_to_make)}')

    ret = 0
    for asset in assets_to_make:
        try:
            make_asset(
                asset=asset,
                host_arch=host_arch,
                archs_to_make=tuple(archs_to_make),
                build_dir=build_dir,
                recipe_dir=recipe_dir,
                cross_compiles=cross_compiles,
                native_build=native_build,
                build_env=build_env,
            )
        except Exception as e:
            print(f'\nError while making {asset}: {e}\n')
            ret = 1

    return ret


if __name__ == '__main__':
   sys.exit(main())
