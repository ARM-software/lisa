#! /usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2018, Arm Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import os
import subprocess
import sys

LISA_HOME = os.getenv('LISA_HOME', '.')

def call_git(*args):
    return subprocess.check_output(('git', *args)).decode('utf-8')

def get_git_sha1(ref):
    return call_git('rev-parse', ref).strip()

def main():
    # Store the commit file in the venv when possible, so we can have venv
    # installed at various point in time that are not interfering with
    # eachother
    default_commit_file = os.path.join(
        (
            os.getenv('LISA_VENV_PATH')
            if int(os.getenv('LISA_USE_VENV', '0')) else
            os.getenv('LISA_HOME')
        ),
        '.lisa-install-commit'
    )

    parser = argparse.ArgumentParser(description='''
        Check if filenames matching a given pattern have been modified since
        the last time the commit sha1 file was updated.
        '''
    )

    parser.add_argument('--commit-file',
        default=default_commit_file,
        help='File containing a git revision. <rev from file>..<curr rev> will be scanned, looking for the filename pattern'
    )

    parser.add_argument('--current-rev',
        default='HEAD',
        help='Git revision that is assumed to be the current one'
    )

    parser.add_argument('--update-recorded-commit',
        help='Update the commit file using sha1 of given git ref'
    )


    try:
        import lisa._cli_tools
    except ImportError:
        cli_path = []
    else:
        cli_path = lisa._cli_tools.__path__
        cli_path = cli_path if cli_path else []

    parser.add_argument('--filename-pattern',
        nargs='*',
        default=['*setup.py', *cli_path, os.path.join(LISA_HOME, 'tools', 'git-hooks')],
        help='git rev-list filename pattern to check'
    )

    args = parser.parse_args()

    # Update mode
    if args.update_recorded_commit:
        new_sha1 = get_git_sha1(args.update_recorded_commit)
        with open(args.commit_file, 'w') as f:
            f.write(new_sha1 + '\n')
    # check mode
    else:
        try:
            with open(args.commit_file, 'r', encoding='utf-8') as f:
                recorded_sha1 = f.read().strip()
        # If there is no commit file, just exit silently since there has been
        # no setup already
        except FileNotFoundError:
            return 0
        else:
            rev_range = '{}..{}'.format(recorded_sha1, args.current_rev)

            def check_pattern(pattern):
                commits = call_git('rev-list', rev_range, '--', pattern).splitlines()
                return commits

            commits = [
                (pattern, commit)
                for pattern in args.filename_pattern
                for commit in check_pattern(pattern)
            ]

            if commits:
                sep = '\n    '
                commits = sep.join(
                    f'{pattern}: {commit}'
                    for pattern, commit in commits
                )
                print(f'Files have been modified in the following commits, re-run lisa-install to update dependencies and install new CLI tools or git hooks:{sep}{commits}')
                print('THIS WILL RESET YOUR VENV !')
                return 1
            else:
                return 0


if __name__ == '__main__':
    sys.exit(main())

# vim :set tabstop=4 shiftwidth=4 textwidth=80 expandtab
