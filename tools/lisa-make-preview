#! /usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2023, Arm Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import subprocess
from itertools import starmap, chain
from tempfile import NamedTemporaryFile
import json
from collections import ChainMap
from operator import itemgetter

from github3 import GitHub

def main():
    owner = 'ARM-Software'
    repo = 'lisa'

    gh = GitHub()
    issues = gh.issues_on(
        username=owner,
        repository=repo,
        state='open',
        labels=['preview'],
    )

    prs = [
        (
            issue,
            gh.pull_request(
                owner=owner,
                repository=repo,
                number=issue.number
            )
        )
        for issue in issues
        if issue.pull_request_urls
    ]

    def make_topic(issue, pr):
        remote = f'remote_{pr.head.sha}'
        return (
            {
                remote: {
                    'url': pr.head.repository.clone_url
                }
            },
            {
                'name': pr.head.ref,
                'remote': remote,
                'base': pr.base.ref,
                'tip': pr.head.ref,
            }
        )

    topics = list(starmap(make_topic, prs))
    if topics:
        remotes, topics = zip(*topics)
        remotes = dict(ChainMap(*chain(
            [{
                'github': {
                'url': f'https://github.com/{owner}/{repo}.git'
                }
            }],
            remotes
        )))

        conf = {
            'rebase-conf': {
                'rr-cache': './rr-cache',
                'remotes': remotes,
                'base': {
                    'remote': 'github',
                    'ref': 'main',
                },
                'topics': sorted(topics, key=itemgetter('name'))
            }
        }
        conf = json.dumps(conf, indent=4)
        print(conf)

        with NamedTemporaryFile(mode='w+', suffix='.manifest.json') as f:
            f.write(conf)
            f.flush()

            manifest = f.name

            cmd = ['batch-rebase', 'create', '.', '--manifest', manifest, '--create-branch', 'preview']
            print(cmd)
            subprocess.check_call(cmd)
    else:
        print('No topics found')

main()
