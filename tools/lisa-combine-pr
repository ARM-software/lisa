#! /usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2023, Arm Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import subprocess
from itertools import starmap, chain
from tempfile import NamedTemporaryFile
import json
from collections import ChainMap
from operator import itemgetter
import argparse
import logging

from github3 import GitHub

def main():
    parser = argparse.ArgumentParser(
        description="""
        Combine github pull requests with the given tag into a branch, rebasing all
        PRs on top of each other.
        """,
    )

    parser.add_argument('--repo', required=True, help='Github repository as owner/name')
    parser.add_argument('--pr-label', action='append', required=True, help='Pull request labels to look for')
    parser.add_argument('--branch', required=True, help='Name of the branch to be created. If the branch exists, it will be forcefully updated')

    args = parser.parse_args()

    owner, repo = args.repo.split('/', 1)
    labels = args.pr_label
    branch = args.branch

    logging.basicConfig(level=logging.INFO)

    gh = GitHub()
    issues = gh.issues_on(
        username=owner,
        repository=repo,
        state='open',
        labels=labels,
    )

    prs = [
        (
            issue,
            gh.pull_request(
                owner=owner,
                repository=repo,
                number=issue.number
            )
        )
        for issue in issues
        if issue.pull_request_urls
    ]

    def make_topic(issue, pr):
        remote = f'remote_{pr.head.sha}'
        return (
            {
                remote: {
                    'url': pr.head.repository.clone_url
                }
            },
            {
                'name': pr.head.ref,
                'remote': remote,
                'nr-commits': pr.commits_count,
                'tip': pr.head.ref,
            }
        )

    topics = list(starmap(make_topic, prs))
    remotes, topics = zip(*topics) if topics else ([], [])
    remotes = dict(ChainMap(*chain(
        [{
            'github': {
            'url': f'https://github.com/{owner}/{repo}.git'
            }
        }],
        remotes
    )))

    conf = {
        'rebase-conf': {
            'rr-cache': './rr-cache',
            'remotes': remotes,
            'base': {
                'remote': 'github',
                'ref': 'main',
            },
            'topics': sorted(topics, key=itemgetter('name'))
        }
    }
    conf = json.dumps(conf, indent=4)
    logging.info(conf)

    with NamedTemporaryFile(mode='w+', suffix='.manifest.json') as f:
        f.write(conf)
        f.flush()

        manifest = f.name

        cmd = ['batch-rebase', 'create', '.', '--manifest', manifest, '--create-branch', branch]
        logging.info(f'Running {" ".join(map(str, cmd))}')
        subprocess.check_call(cmd)

main()
