#!/bin/bash
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2015, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

################################################################################
# Internal configurations
################################################################################

BASE_DIR=$(dirname $(realpath -s $0))
source "${BASE_DIR}/helpers"


################################################################################
# Configuration options
################################################################################

usage() {
	cat <<EOF

 Usage ./$(basename $0) [OPTIONS]...

 Generate a speficied set of kernel artifacts based on the provided platform definitions.

 Optional arguments:

    -b, --build                     make the default target, i.e. kernel image
    -c, --clean                     make clean
    -d, --distclean                 make distclean
    -i, --image                     make Image
    -m, --menuconfig                make menuconfig
    -s, --savedefconfig             make savedefconfig
    -t, --dtbs                      make dtbs
    -x, --clean_all                 make distclean, remove toolchain
        --modules                   make modules
        --modules_install           make modules_install to INSTALL_MOD_PATH
        --dtbo_image                make dtbo.img

    -a, --use-ccache                prepend 'ccache' to CROSS_COMPILE
    -k, --keepconfig                keep exiting .config, i.e. no other config is applied
    -l, --config_list <list_confs>  merge this list of CONFIGs
        --silent                    report only error/warning messages

    -h, --help                      print help and exit

 Usage notes:
     1) Without OPTIONS it builds the kernel with platform defined configs
     2) To force a kernel full build, when -m/-s/-c/-d/-x are given, add also -b
     3) If -k is _not_ given, the current .config will be altered by CONFIG_CMD or DEFCONFIG

EOF
}

# Configuration options
YES=1
NO=0

# Configured targets
MAKE_MENUCONFIG=$NO
MAKE_SAVEDEFCONFIG=$NO
MAKE_KEEPCONFIG=$NO
BUILD_DTBS=$NO
BUILD_DTBO_IMAGE=$NO
BUILD_MODULES=$NO
BUILD_MODULES_INSTALL=$NO
BUILD_IMAGE=$NO
CLEAN_KERNEL=$NO
DISTCLEAN_KERNEL=$NO
CLEAN_ALL=$NO
USE_CCACHE=${USE_CACHE:-$NO}
OUT=/dev/stdout

# With no options: build the default target
BUILD_NOW=$NO
[ $# != 0 ] || BUILD_NOW=$YES

while [[ $# -gt 0 ]]; do
	case $1 in
		-b|--build)
			BUILD_NOW=$YES
			;;
		-c|--clean)
			CLEAN_KERNEL=$YES
			;;
		-d|--distclean)
			DISTCLEAN_KERNEL=$YES
			;;
		-i|--image)
			BUILD_IMAGE=$YES
			;;
		-k|--keepconfig)
			MAKE_KEEPCONFIG=$YES
			BUILD_NOW=$YES
			;;
		-m|--menuconfig)
			MAKE_MENUCONFIG=$YES
			# Make menuconfig
			# If no build option is given, it won't build
			;;
		-s|--savedefconfig)
			MAKE_SAVEDEFCONFIG=$YES
			# Make savedefconfig
			# If no build option(-b) is given, it won't build
			;;
		-t|--dtbs)
			BUILD_DTBS=$YES
			;;
		--dtbo_image)
			BUILD_DTBO_IMAGE=$YES
			;;
		-x|--clean_all)
			CLEAN_ALL=$YES
			;;
		--modules)
			BUILD_MODULES=$YES
			;;
		--modules_install)
			BUILD_MODULES_INSTALL=$YES
			;;
		-a|--use-ccache)
			USE_CCACHE=$YES
			;;
		-l|--config_list)
			BUILD_CONFIG_LIST="$2"
			shift
			;;
		--silent)
			OUT=/dev/null
			;;

		-h|--help)
			usage
			exit $OK
			;;
		*)
			usage
			exit $EAGAIN
			;;
	esac
	shift # past argument or value
done

# Format configuration
format_conf() {
	CONF=$1
	if [ $CONF -eq $YES ]; then
		echo -n "YES"
		return
	fi
	echo -n " NO"
}

# Print information about behavior
echo
c_info "Build configuration:"
c_info "   Menuconfig            : $(format_conf ${MAKE_MENUCONFIG})"
c_info "   Savedefconfig         : $(format_conf ${MAKE_SAVEDEFCONFIG})"
c_info "   Keepconfig            : $(format_conf ${MAKE_KEEPCONFIG})"
c_info "   Build full            : $(format_conf ${BUILD_NOW})"
c_info "   Build Image           : $(format_conf ${BUILD_IMAGE})"
c_info "   Build dtbs            : $(format_conf ${BUILD_DTBS})"
c_info "   Build dtbo.img        : $(format_conf ${BUILD_DTBO_IMAGE})"
c_info "   Build modules         : $(format_conf ${BUILD_MODULES})"
c_info "   Build modules_install : $(format_conf ${BUILD_MODULES_INSTALL})"
c_info "   Clean                 : $(format_conf ${CLEAN_KERNEL})"
c_info "   Distclean             : $(format_conf ${DISTCLEAN_KERNEL})"
c_info "   Clean all             : $(format_conf ${CLEAN_ALL})"
c_info "   Use ccache            : $(format_conf ${USE_CCACHE})"

# Load platform definitions
source "${DEFINITIONS_PATH}"

# Print information about platform
echo
c_info "Platform configuration:"
c_info "   PLATFORM_NAME         : ${PLATFORM_NAME}"
c_info "   DEFCONFIG             : ${DEFCONFIG}"
c_info "   CONFIG_CMD            : ${CONFIG_CMD}"
c_info "   ARCH                  : ${ARCH}"
c_info "   CROSS_COMPILE         : ${CROSS_COMPILE}"
c_info "   MODULES_INSTALL_DIR   : ${INSTALL_MOD_PATH}"


################################################################################
# Configuring builds
################################################################################

# Export paths
export LD_LIBRARY_PATH="${TOOLS_PATH}/lib/:$LD_LIBRARY_PATH"
export PATH="${TOOLS_PATH}:$PATH"

# Check for a valid toolchain
which ${CROSS_COMPILE}gcc &>/dev/null
if [ $? -ne 0 ]; then
	echo
	echo
	c_error "(Cross)compiler [${CROSS_COMPILE}gcc] not found!"
	c_warning "Ensure to have CROSS_COMPILE set to a valid toolchain"
	c_warning "which should be reachable from your PATH"
	echo
	exit $EAGAIN
fi

# Export compiler configuration
export ARCH
export CROSS_COMPILE
if [ "${USE_CCACHE}" -eq $YES ]; then
	export CC="ccache ${CROSS_COMPILE}gcc"
	export CXX="ccache ${CROSS_COMPILE}g++"
fi

# Enable parallel builds
NCPUS="$(( 2 * $(nproc) ))"


################################################################################
# Build cleanup
################################################################################

if [ "${CLEAN_KERNEL}" -eq $YES ] || [ "${CLEAN_ALL}" -eq $YES ]; then
	(cd "${KERNEL_SRC}";  make clean)
fi

if [ "${DISTCLEAN_KERNEL}" -eq $YES ] || [ "${CLEAN_ALL}" -eq $YES ]; then
	(cd "${KERNEL_SRC}";  make distclean)
fi

if [ "${MAKE_KEEPCONFIG}" -eq $YES ]; then
	c_warning "building with current .config"
fi


################################################################################
# Build configuration
################################################################################

if [ ! -z "${CONFIG_CMD}" ] && [ "${MAKE_KEEPCONFIG}" -eq $NO ]; then
	c_info "Running CONFIG_CMD..."
	(set -x; cd "${KERNEL_SRC}"; ${CONFIG_CMD})
fi

if [ ! -z "${DEFCONFIG}" ] && [ "${MAKE_KEEPCONFIG}" -eq $NO ]; then
	c_info "Running DEFCONFIG [$DEFCONFIG]..."
	(set -x; cd "${KERNEL_SRC}"; make ${DEFCONFIG})
fi

if [ ! -z "${BUILD_CONFIG_LIST}" ]; then
	c_info "Running [merge_configs.sh]..."
	list_configs=(${BUILD_CONFIG_LIST})
	timestamp=$(date +%s)
	tmp_file="/tmp/${timestamp}"
	for config in "${list_configs[@]}"; do
		echo ${config} >> "${tmp_file}"
	done
	if [ -f "${KERNEL_SRC}/scripts/kconfig/merge_config.sh" ]; then
		(set -x; cd "${KERNEL_SRC}"; \
			./scripts/kconfig/merge_config.sh -m \
			.config ${tmp_file})
	else
		c_error "No merge_config.sh script found"
	    	exit $ENOENT
	fi
	rm -f ${tmp_file}
	c_info "Running oldconfig after merge of configs"
	(set -x; cd "${KERNEL_SRC}"; \
		yes "" 2>/dev/null | make oldconfig)
fi


################################################################################
# Make the requried target
################################################################################

if [ ${BUILD_IMAGE} -eq $YES ]; then
	c_info "Making [Image]..."
	(set -x; cd "${KERNEL_SRC}"; make -j${NCPUS} "$KERNEL_IMAGE" >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${BUILD_DTBS} -eq $YES ]; then
	c_info "Making [dtbs]..."
	(set -x; cd "${KERNEL_SRC}"; make -j${NCPUS} dtbs >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${BUILD_DTBO_IMAGE} -eq $YES ]; then
	c_info "Making [dtbo.img]..."
	(set -x; cd "${KERNEL_SRC}"; make -j${NCPUS} dtbo.img >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${BUILD_MODULES} -eq $YES ]; then
	c_info "Making [modules]..."
	(set -x; cd "${KERNEL_SRC}";  make -j${NCPUS} modules >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${BUILD_MODULES_INSTALL} -eq $YES ]; then
	c_info "Making [modules_install] to [${INSTALL_MOD_PATH}] ..."
	(set -x; cd "${KERNEL_SRC}";  make -j${NCPUS} modules_install >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${MAKE_MENUCONFIG} -eq $YES ]; then
	c_info "Making [menuconfig]..."
	(set -x; cd "${KERNEL_SRC}"; make menuconfig)
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${MAKE_SAVEDEFCONFIG} -eq $YES ]; then
	c_info "Making [savedefconfig]..."
	(set -x; cd "${KERNEL_SRC}"; make savedefconfig)
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

if [ ${BUILD_NOW} -eq $YES ]; then
	c_info "Making default target..."
	(set -x; cd "${KERNEL_SRC}" make -j${NCPUS} >${OUT})
	ERROR=$?; [ $ERROR -eq 0 ] || exit $ERROR
fi

