#!/bin/bash

SCRIPT_DIR=$(dirname $(realpath -s $0))
BASE_DIR="$SCRIPT_DIR/../.."
source "${BASE_DIR}/helpers"
source "${PLATFORM_PATH}/definitions"

################################################################################
# Utils
################################################################################

flatten_file() {
	OUT_FILE="$1"

	MODULE_DIR=$(dirname $OUT_FILE)
	FILE_NAME=$(basename $OUT_FILE)
	IN_FILE=$(find . -name $FILE_NAME)

	cat $IN_FILE | \
	while read -r LINE; do
		OUT_LINE=""
		if [[ "$LINE" != "#"* ]]; then
			read -a PARAMS <<< "${LINE}"
			for ELEMENT in ${PARAMS[@]}; do
				OUT_LINE="${OUT_LINE}$(basename ${ELEMENT}) "
			done
			OUT_LINE=$(sed 's/ *$//g' <<< ${OUT_LINE})
		else
			OUT_LINE=$LINE
		fi
		echo "${OUT_LINE}" >> ${OUT_FILE}
	done
}

publish_modules() {
	MODULE_DIR=$1

	pushd ${INSTALL_MOD_PATH}

	echo
	c_info "Generating modules descriptors:"
	for OUT_FILE in modules.dep modules.order modules.alias; do
		OUT_FILE="$MODULE_DIR/$OUT_FILE"
		c_info "- $OUT_FILE"
		flatten_file "$OUT_FILE"
	done

	echo
	c_info "Installing modules:"
	find . -name *.ko | \
	while read KO; do
		c_info "- ${MODULE_DIR}/$(basename $KO)"
		cp $KO ${MODULE_DIR}/$(basename $KO)
	done

	popd
}

################################################################################
# Build all images required to test a new kernel
################################################################################

echo
c_info "Cleaning ${ARTIFACTS_PATH}..."
rm -rf ${ARTIFACTS_PATH}

# Local modules installation path
echo
c_info "Build all images and modules..."
export INSTALL_MOD_PATH=${ARTIFACTS_PATH}/modules
mkdir -p ${INSTALL_MOD_PATH}
./build --use-ccache --image --modules --modules_install --dtbo_image --silent; ERROR=$?
[ $ERROR -eq 0 ] || exit $ERROR

# Check that all required images have been properly created
DTBO_IMAGE=$KERNEL_SRC/arch/arm64/boot/$KERNEL_DTBO
if [ ! -f $DTBO_IMAGE ]; then
	c_error "DTB overlay [$DTBO_IMAGE] not generated"
	exit $ENOENT
fi
KERNEL_IMAGE=$KERNEL_SRC/arch/arm64/boot/$KERNEL_IMAGE
if [ ! -f $KERNEL_IMAGE ]; then
    c_error "Kernel [$KERNEL_IMAGE] not generated"
    exit $ENOENT
fi

echo
c_info "Publishing DTBO image $DTBO_IMAGE to:"
c_info "   $ARTIFACTS_PATH/$ANDROID_DTBO_IMAGE"
cp $DTBO_IMAGE $ARTIFACTS_PATH/$ANDROID_DTBO_IMAGE

echo
c_info "Publishing KERNEL image $KERNEL_IMAGE to:"
c_info "   $ARTIFACTS_PATH/$(basename $KERNEL_IMAGE)"
cp $KERNEL_IMAGE $ARTIFACTS_PATH/$(basename $KERNEL_IMAGE)

echo
MODULE_DIR="$ARTIFACTS_PATH/push_files/vendor/lib/modules"
mkdir -p ${MODULE_DIR}
c_info "Publishing MODULES to:"
c_info "   $MODULE_DIR"
publish_modules ${MODULE_DIR}

