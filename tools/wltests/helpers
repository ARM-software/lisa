#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2015, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

################################################################################
# Paths
################################################################################

# Setup a minimal path for the build scripts
BASE_DIR=$(realpath $BASE_DIR)

# Required options
KERNEL_PATH=${KERNEL_PATH:-"/usr/src/linux"}

# Generics
TOOLS_PATH="${BASE_DIR}/tools"
DEFINITIONS_PATH="${PLATFORM_PATH}/definitions"
ARTIFACTS_PATH="${PLATFORM_PATH}/artifacts"

# Android
ANDROID_SCRIPTS_PATH="${BASE_DIR}/android"
ANDROID_OUTPUT_PATH="${PLATFORM_PATH}/artifacts"


################################################################################
# Exit codes
################################################################################

OK=0        # Success
ENOENT=2   # No such file or directory
EIO=5      # I/O error
EAGAIN=11  # Try again
ENODEV=19  # No such device
EINVAL=22  # Invalid argument

# Helper definitions
FATAL_ERROR=1
NONFATAL_ERROR=2
SUCCESS_CODE=$OK


################################################################################
# Logging functions
################################################################################
c_error() {
	NOW=$(date +"%H:%m:%S")
	# If there is only one parameter, let's assume it's just the message
	if [ $# -gt 1 ]; then
		local parent_lineno="$1"
		local message="$2"
		echo -e "${red}$NOW - ERROR: on or near line ${parent_lineno}: ${message}${nocol}"
		return
	fi

	local message="$1"
	echo -e "${red}$NOW - ERROR   : ${message}${nocol}"
}

c_warning() {
	NOW=$(date +"%H:%m:%S")
	# If there is only one parameter, let's assume it's just the message
	if [ $# -gt 1 ]; then
		local parent_lineno="$1"
		local message="$2"
		echo -e "${yellow}$NOW - WARNING: on or near line ${parent_lineno}: ${message}${nocol}"
		return
	fi
	local message="$1"
	echo -e "${yellow}$NOW - WARNING : ${message}${nocol}"
}

c_info() {
	NOW=$(date +"%H:%m:%S")
	# If there is only one parameter, let's assume it's just the message
	if [ $# -gt 1 ]; then
		local parent_lineno="$1"
		local message="$2"
		echo -e "${blue}$NOW - INFO: on or near line ${parent_lineno}: ${message}${nocol}"
		return
	fi
	local message="$1"
	echo -e "${blue}$NOW - INFO    : ${message}${nocol}"
}

d_notify() {
	MESSAGE=$1
	ICON=$2
	# Let's try to send a desktop notification,
	# silently fails if there is not support.
	notify-send \
		--icon=$ICON \
		--urgency=critical \
		--expire-time=1500 \
		"Test Series" \
		"$MESSAGE" \
		2>/dev/null
}

my_tput() {
	if [ "${TERM-dumb}" == dumb ]; then
		return
	fi
	tput $*
}

box_out()
{
	local s=("$@") b w
	for l in "${s[@]}"; do
		((w<${#l})) && { b="$l"; w="${#l}"; }
	done
	my_tput setaf 3
	echo -e "|-${b//?/-}-|"
	for l in "${s[@]}"; do
		printf '| %s%*s%s |\n' "$(my_tput setaf 4)" "-$w" "$l" "$(my_tput setaf 3)"
		# echo "|-${b//?/-}-|"
	done
	echo "|-${b//?/-}-|"
	my_tput sgr 0
}


################################################################################
# Utilities
################################################################################

c_extract() {
	if [ -f $1 ] ; then
		case $1 in
		*.tar.xz)
			tar xvJf $1 -C $2
		;;
		*.tar.bz2)
			tar xvjf $1 -C $2
		;;
		*.tar.gz)
			tar xvzf $1 -C $2
		;;
		*.rar)
			unrar x $1 $2
		;;
		*.tar)
			tar xvf $1 -C $2
		;;
		*.tbz2)
			tar xvjf $2 -C $2
		;;
		*.tgz)
			tar xvzf $1 -C $2
		;;
		*.zip)
			unzip $1 -d $2
		;;
		*.7z)
			7z x $1 -o $2
		;;
		*)
			c_error "don't know to extract archive $1"
			exit $EINVAL
		;;
		esac
	else
		c_error "'$1' is not a valid file"
		exit $ENOENT
	fi
}


################################################################################
# Colors
################################################################################

if [ -t 1 ]; then
	ncolors=$(my_tput colors)
	if [ -n "${ncolors}" ] && [ ${ncolors} -ge 8 ]; then
		nocol='\e[0m' # No Color
		white='\e[1;37m'
		black='\e[0;30m'
		blue='\e[0;34m'
		lblue='\e[1;34m'
		green='\e[0;32m'
		lgreen='\e[1;32m'
		cyan='\e[0;36m'
		lcyan='\e[1;36m'
		red='\e[0;31m'
		lred='\e[1;31m'
		purple='\e[0;35m'
		lpurple='\e[1;35m'
		brown='\e[0;33m'
		yellow='\e[1;33m'
		grey='\e[0;30m'
		lgrey='\e[0;37m'
	fi
fi

