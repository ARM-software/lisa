# This is an example agenda which shows a possible (rather large) set of
# workloads and data collection.
#
# This will run 5 iterations each of a large set of workloads, under each of
# PELT and WALT load tracking (it assumes that the target supports both
# mechanisms).
#

global:
  # Collect energy data, ftrace files, and dmesg
  # You may want to edit your config.yaml to set up the energy_measurement
  # instrument (an example configuration is provided in this repo).
  instrumentation: [energy_measurement, trace-cmd, dmesg]
  # Do everything 5 times
  iterations: 5

  # To aid reproducibility and try to reduce noise in power measurements,
  # minimise the screen brightness and set airplane mode on.
  # TODO: will this break workloads that require internet?
  runtime_params:
    brightness: 0
    airplane_mode: true

# "Sections" are groups of runtime configuration. In the results analysis they
# will be mapped to "tags" using the classifiers field below
sections:
  - id: pelt         # Just a human-readable name
    classifiers:     # Will be used to map job output to 'tags' when analysing
      load_tracking: pelt_cls
    runtime_params:  # These are the actual parameters that get set on the target
      sysfile_values:
        /proc/sys/kernel/sched_use_walt_cpu_util: 0
        /proc/sys/kernel/sched_use_walt_task_util: 0

  - id: walt
    classifiers:
      load_tracking: walt_cls
    runtime_params:
      sysfile_values:
        /proc/sys/kernel/sched_use_walt_cpu_util: 1
        /proc/sys/kernel/sched_use_walt_task_util: 1

workloads:
  # Sit on the homescreen for 15 seconds
  - name: homescreen
    id: homescreen_15s
    workload_parameters:
      duration: 15

  # Play 30 seconds of a video with Exoplayer - this is the basis for the
  # YouTube app, so it's hoped that this is a decent proxy for Youtube
  # performance on devices where running the real app is impractical
  - name: exoplayer
    id: exoplayer_30s
    workload_parameters:
      version: 2.4
      duration: 30

  - name: pcmark
    id: pcmark
    runtime_parameters:
      airplane_mode: false

  - name: geekbench
    id: geekbench
    runtime_parameters:
      airplane_mode: false

  # We need one entry for each of the Jankbench sub-benchmarks
  - name: jankbench
    # 'id' and 'classifiers' are optional - just to make the output directory
    # easier to read/parse
    id: jb_list_view
    classifiers:
      test_ids: jb_list_view
    # workload_parameters are the real parameters that influence what gets run
    workload_parameters:
      test_ids: list_view
  - name: jankbench
    id: jb_image_list_view
    classifiers:
      test_ids: jb_image_list_view
    workload_parameters:
      test_ids: image_list_view
  - name: jankbench
    id: jb_shadow_grid
    classifiers:
      test_ids: jb_shadow_grid
    workload_parameters:
      test_ids: shadow_grid
  - name: jankbench
    id: jb_low_hitrate_text
    classifiers:
      test_ids: jb_low_hitrate_text
    workload_parameters:
      test_ids: low_hitrate_text
  - name: jankbench
    id: jb_edit_text
    classifiers:
      test_ids: jb_edit_text
    workload_parameters:
      test_ids: edit_text
