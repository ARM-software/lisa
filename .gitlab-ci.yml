# 
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2024, Arm Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

default:
  tags:
    - ubuntu_22_04_amd64
  # cancel a job if a new pipeline is triggered on the same branch
  interruptible: true

# Required for Manual runs through UI
variables:
  WEB_ENABLE_TEST:
    value: "True"
    options:
      - "True"
      - "False"
    description: True to run test job when triggered via Web UI.
  WEB_ENABLE_AUTOBRANCH:
    value: "True"
    options:
      - "True"
      - "False"
    description: True to run test job when triggered via Web UI.

Test:
  rules:
      - if: $CI_PIPELINE_SOURCE == "web" && $WEB_ENABLE_TEST == "True"
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  parallel:
    matrix:
      - PYVERSION: [8, 11]
  before_script:
    - sudo sh -c 'echo "APT::Acquire::Retries=3;" >> /etc/apt/apt.conf.d/99retry-downloads'
    - export DEBIAN_FRONTEND=noninteractive
    - sudo apt-get update -y
    - sudo apt-get upgrade -y
    - sudo apt-get install software-properties-common -y
    - sudo add-apt-repository ppa:deadsnakes/ppa -y
    - sudo apt-get update -y
    - sudo apt-get -y install python3.${PYVERSION}-venv python3.${PYVERSION}-tk python3.${PYVERSION}-full
    - echo "$(python3 --version)"
    - sudo chmod o+rx /sys/kernel/debug
  script:
    - export LISA_PYTHON=python3.${PYVERSION}
    - sudo ./install_base.sh --install-all
    - bash ./tools/tests.sh

Autobranch:
  needs: ['Test']
  environment:
    # This grants the GITLAB_REPO_TOKEN variable allowing to push to the repo
    name: repo_write_access

  variables:
    # Do not clone or fetch anything, as we will do it manually so that the job
    # runs with the code from the default branch (main) rather than the merge
    # request branch for safety reasons.
    GIT_STRATEGY: none
  rules:
      - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $WEB_ENABLE_AUTOBRANCH == "True"
      - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /(^|,)autobranch($|,)/ 
  resource_group: autobranch
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - sudo apt-get update -y
    - sudo apt-get upgrade -y
    - sudo apt-get install -y git python3-full

    - |
      # Avoid using /tmp since it's probably in tmpfs and would consume RAM
      export TMPDIR=$(readlink -f .)/tmp
      mkdir -p "$TMPDIR"

      origin_repo=$(mktemp -d)
      git clone -b "$CI_DEFAULT_BRANCH" "$CI_REPOSITORY_URL" "$origin_repo"

      # This is critical for safety: We want to be executing the code from the
      # main branch to avoid any manipulation from the MR branch
      cd "$origin_repo" || exit 1

    - |
      git remote set-url origin "https://gitlab-ci:${GITLAB_REPO_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
      git remote -v
      git branch --list --remotes

      git config --global user.name 'Gitlab CI'
      git config --global user.email 'gitlab-ci@arm.com'

  script: 
    - |
      set -e
      export LC_ALL=C
      venv=$(mktemp -d)
      python3 -m venv "$venv" && source "$venv/bin/activate"
      pip install --upgrade pip
      pip install ./tools/lisa-combine-gitlab-mr

      function update_branch() {
          local label=$1
          local branch=$2
          local force_branch=$3

          local worktree=$(mktemp -d --suffix "${branch}-repo")
          local patch=$(mktemp --suffix "$branch.patch")

          lisa-combine-gitlab-mr --server "$CI_SERVER_HOST" --repo "$CI_PROJECT_PATH" --project-id "$CI_PROJECT_ID" --api-url "$CI_API_V4_URL" --mr-label "$label" --branch "$force_branch" &&

          git fetch origin "$branch" &&

          # Work in a separate worktree so that there is no risk of folders
          # added to PATH by init_env being manipulated
          git worktree add "$worktree" --checkout "$branch" &&

          git -C "$worktree" diff --binary "HEAD..$force_branch" > "$patch" &&

          if [[ -s "$patch" ]]; then
              # Apply the patch to the index as well, so that any file created
              # is automatically added to the commit we are about to create.
              git -C "$worktree" apply --index "$patch" &&
              git -C "$worktree" commit --all -m "Autocommit to $branch branch on $(date) tracking $force_branch"

              git push --force origin "$force_branch"
              git push origin "$branch"
          else
              echo "Empty patch, $branch and $force_branch branches are up to date."
          fi
      }

      ret=0
      function keepgoing {
          "$@" || ret=1
      }

      keepgoing update_branch for-master-autobranch master master-force
      keepgoing update_branch for-preview-autobranch preview preview-force

      exit $ret
