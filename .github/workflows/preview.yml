name: preview

on:
  # Whenever a pull request is labeled or unlabeled.
  pull_request_target:
    types: [labeled, unlabeled, synchronize]

  # To be able to manually trigger the job from GitHub UI
  workflow_dispatch:

  # Run the workflow when the base branch is updated.
  #
  # Note that a push from a workflow will by default not trigger a push event,
  # so we list both branches here as "main" only would currently do nothing:
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow
  push:
    branches:
      - 'main'
      - 'master'

permissions:
  # Necessary to be able to push to the repo
  contents: write

jobs:
  preview:
    name: preview

    # Ensure jobs queue in order, so that we don't get race conditions while
    # pushing the branch
    concurrency: preview

    # Set the type of machine to run on
    # https://github.com/actions/virtual-environments
    runs-on: ubuntu-latest

    if: |
          (
              github.event_name == 'pull_request_target' &&
              (
                  (
                      github.event.action == 'synchronize' &&
                      contains(github.event.pull_request.labels.*.name, 'preview')
                  ) ||
                  (
                      (
                          github.event.action == 'labeled' ||
                          github.event.action == 'unlabeled'
                      ) &&
                      github.event.label.name == 'preview'
                  )
              )
          ) ||
          github.event_name != 'pull_request_target'

    steps:

      # Checks out a copy of your repository on the virtual machine
      - uses: actions/checkout@v3
        with:
          # Ensure the tools we run come from trusted source. We don't need to
          # get the current PR as it will be fetched by batch-rebase directly
          # anyway.
          repository: ARM-software/lisa

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup git
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'GitHub Action'

          git remote -v
          git branch --list --remotes

      - name: Create preview branch
        run: |
          set -e
          export LC_ALL=C

          source init_env &&

          lisa-combine-pr --repo 'ARM-Software/lisa' --pr-label preview --branch preview-force &&

          git checkout preview &&
          git diff --binary preview..preview-force > update.patch

          if [[ -s update.patch ]]; then
              # Apply the patch to the index as well, so that any file created
              # is automatically added to the commit we are about to create.
              git apply --index update.patch &&
              git commit --all -m "Autocommit to preview branch on $(date) tracking preview-force"

              git push --force origin preview-force
              git push origin preview
          else
              echo "Empty patch, preview and preview-force branches are up to date."
          fi
