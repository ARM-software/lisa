#
# LISA documentation build configuration file, created by
# sphinx-quickstart on Tue Dec 13 14:20:00 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import logging
import os
import re
import subprocess
import sys
import unittest
import textwrap
import json
import functools
import inspect
import importlib
import types
import contextlib
from pathlib import Path
import importlib
from operator import attrgetter
import pickle
import shutil
import shlex
from urllib.parse import urlparse
import itertools

from sphinx.domains.python import PythonDomain

# Signal to lisa.utils.is_running_sphinx() that we are indeed running under
# sphinx before we import anything
os.environ['_LISA_DOC_SPHINX_RUNNING'] = '1'

# This shouldn't be needed, as using a virtualenv + setup.py should set up the
# sys.path correctly. However that seems to be half broken on ReadTheDocs, so
# manually set it here
sys.path.insert(0, os.path.abspath('../'))

# Import our packages after modifying sys.path
import lisa
from lisa.utils import sphinx_nitpick_ignore, setup_logging, get_obj_name, DirCache, resolve_dotted_name
from lisa.version import VERSION_TOKEN
from lisa._doc.helpers import (
    autodoc_process_test_method, autodoc_process_analysis_events,
    autodoc_process_analysis_plots, autodoc_process_analysis_methods,
    autodoc_skip_member_handler, autodoc_process_inherited_members,
    autodoc_process_inherited_signature, autodoc_process_bases_handler,
    DocPlotConf, autodoc_pre_make_plots,
    intersphinx_warn_missing_reference_handler,
    autodoc_ai_desc_process, autodoc_ai_desc_merge,
    make_autodoc_ai_desc_build_finished
)
from lisa.analysis.base import TraceAnalysisBase

import devlib


RTD = (os.environ.get('READTHEDOCS', False) == 'True')

_NO_DEFAULT = object()
def getvar(name, default=_NO_DEFAULT):
    try:
        v = os.environ[name]
    except KeyError as e:
        if default is _NO_DEFAULT:
            raise e
        else:
            return default
    else:
        if RTD:
            # TODO: workaround this readthedocs issue:
            # https://github.com/readthedocs/readthedocs.org/issues/8636
            def unquote(v):
                try:
                    _v = shlex.split(v)
                # Not quoted in the first place
                except ValueError:
                    return v
                else:
                    try:
                        v, = _v
                    # More than one item, this means the string was not quoted
                    except ValueError:
                        return v
                    else:
                        return v

            v = unquote(v)
        return v


def copy_file(src, dst):
    src = Path(src)
    dst = Path(dst)

    dst.unlink(missing_ok=True)
    shutil.copy2(src, dst)


def prepare(home, enable_plots, outdir):
    configs = {}
    outdir = Path(outdir).resolve()

    # This ugly hack is required because by default TestCase.__module__ is
    # equal to 'case', so sphinx replaces all of our TestCase uses to
    # unittest.case.TestCase, which doesn't exist in the doc.
    for name, obj in vars(unittest).items():
        try:
            m = obj.__module__
            obj.__module__ = 'unittest' if m == 'unittest.case' else m
        except Exception:
            pass



    def run(cmd, **kwargs):
        return subprocess.run(
            cmd,
            cwd=home,
            **kwargs,
        )

    # In case we have a shallow clone, make sure to have the whole
    # history to be able to generate breaking change list and any other
    # git-based documentation
    run(['git', 'fetch', '--unshallow'], check=False)
    run(['git', 'fetch', '--tags'], check=False)

    # Ensure we have the changelog notes that supplement commit messages, as
    # sometimes the markers such as FEATURE were forgotten and later added
    # using git notes.
    run(['git', 'fetch', 'origin', 'refs/notes/changelog'])

    source_env = {
        **os.environ,
        # LISA_USE_VENV=0 will avoid re-installing LISA automatically,
        # which would be useless.
        'LISA_USE_VENV': '0',
    }
    # If LISA_HOME is set, sourcing the script won't work
    source_env.pop('LISA_HOME', None)

    init_env = home / 'init_env'
    script = textwrap.dedent(
        f"""
        source {init_env} >&2 &&
        python -c 'import os, json; print(json.dumps(dict(os.environ)))'
        """
    )
    out = subprocess.check_output(
        ['bash', '-c', script],
        cwd=home,
        # Reset the environment, including LISA_HOME to allow sourcing without
        # any issue
        env=source_env,
    )
    os.environ.update(json.loads(out))

    base_url, versions, doc_version = get_base_url(outdir=outdir)
    versions_filename = 'versions.json'
    versions_path = outdir / versions_filename
    with open(versions_path, 'w') as f:
        json.dump(versions, f)

    def update_theme_options(existing):
        existing = existing or {}
        # TODO: If base_url is a file:/// URL, the browser will forbid
        # the JS code access to the local file, so the switcher will be
        # empty. Instead, this can be used:
        # python -m http.server -d doc/_build/html/
        if urlparse(base_url).scheme == 'file':
            return existing
        else:
            return {
                **existing,
                'switcher': {
                    'json_url': f'{base_url}/{versions_filename}',
                    'version_match': doc_version,
                }
            }

    configs['html_theme_options'] = update_theme_options
    configs['html_title'] = lambda _: f'LISA {doc_version} documentation'


    # Re-run the notebook to ensure the version of bokeh used is the same as
    # the one that will be added via html_js_files. Otherwise, the plot display
    # will be broken.
    notebooks_in_base = Path(home, 'ipynb')
    notebooks = [
        'examples/analysis_plots.ipynb',
    ]

    plot_conf_path = Path(home, 'doc', 'plot_conf.yml')
    if enable_plots:

        def get_plot_methods(names=None):
            meths = set(itertools.chain.from_iterable(
                subclass.get_plot_methods()
                for subclass in TraceAnalysisBase.get_analysis_classes().values()
            ))

            if names is None:
                return meths
            else:
                meths = {
                    get_obj_name(f): f
                    for f in meths
                }
                return {
                    f
                    for name in names
                    if (f := meths.get(name))
                }

        def populate(key, temp_path):
            (names, notebooks, *_) = key
            plot_methods = get_plot_methods(names)

            # We pre-generate all the plots, otherwise we would end up running
            # polars code in a multiprocessing subprocess created by forking
            # CPython, leading to deadlocks:
            # https://github.com/sphinx-doc/sphinx/issues/12201
            hv.extension('bokeh')

            plot_conf = DocPlotConf.from_yaml_map(plot_conf_path)
            plots = autodoc_pre_make_plots(plot_conf, plot_methods)
            plots = {
                # Serialize by name so pickle does not raise an exception
                # because of the wrappers with the updated __qualname__ and
                # __module__. Otherwise, their name resolves to something else
                # and it pickle does not allow that.
                get_obj_name(k): v
                for k, v in plots.items()
            }
            with open(temp_path / 'plots.pickle', 'wb') as f:
                pickle.dump(plots, f)

            for _path in notebooks:
                _path = Path(_path)

                in_path = notebooks_in_base / _path
                out_path = temp_path / 'ipynb' / _path
                out_path.parent.mkdir(parents=True, exist_ok=True)
                try:
                    out_path.unlink()
                except FileNotFoundError:
                    pass

                logging.info(f'Refreshing notebook: {in_path}')
                subprocess.check_call([
                    'jupyter',
                    'nbconvert',
                    in_path,
                    '--execute',
                    '--to=notebook',
                    f'--output={out_path}'
                ])

        import holoviews as hv
        import bokeh
        import panel as pn
        import jupyterlab

        plot_methods = {
            get_obj_name(f): f
            for f in get_plot_methods()
        }
        dir_cache = DirCache(
            'doc_plots',
            populate=populate,
            fmt_version='1',
        )
        key = (
            sorted(plot_methods.keys()),
            notebooks,
            hv.__version__,
            bokeh.__version__,
            pn.__version__,
            jupyterlab.__version__,
            plot_conf_path.read_text(),
        )
        cache_path = dir_cache.get_entry(key)

        with open(cache_path / 'plots.pickle', 'rb') as f:
            plots = {
                plot_methods[name]: v
                for name, v in pickle.load(f).items()
            }

        for _path in notebooks:
            copy_file(
                cache_path / 'ipynb' / _path,
                Path(home, 'doc', 'workflows', 'ipynb') / _path,
            )

    else:
        plots = {}
        for _path in notebooks:
            copy_file(
                notebooks_in_base / _path,
                Path(home, 'doc', 'workflows', 'ipynb') / _path,
            )

    return (plots, configs)



# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'lisa._doc.helpers',
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinxcontrib.plantuml',
    'nbsphinx',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = {
    '.rst': 'restructuredtext',
}

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'LISA'
copyright = '2024, ARM-Software'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
version = str(lisa.__version__)
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'en'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'pydata_sphinx_theme'

def get_base_url(outdir=None):
    default_version = getvar('READTHEDOCS_VERSION') if RTD else VERSION_TOKEN
    doc_version = getvar('LISA_DOC_VERSION', default_version)

    try:
        unversioned_url = getvar('LISA_DOC_BASE_URL')
    # Local build
    except KeyError:
        if outdir is None:
            raise ValueError('Neither LISA_DOC_BASE_URL nor outdir were specified')
        else:
            base_url = f'file:///{outdir}'
            versions = [
                {
                    'name': doc_version,
                    'version': doc_version,
                    'url': base_url,
                }
            ]
    else:
        unversioned_url = str(unversioned_url).rstrip('/')

        try:
            versions = getvar('LISA_DOC_ALL_VERSIONS')
        except KeyError:
            versions = [doc_version]
        else:
            versions = json.loads(versions)

        versions = [
            {
                'name': version,
                'version': version,
                'url': f'{unversioned_url}/{version}',
            }
            for version in versions
        ]
        base_url = f'{unversioned_url}/{doc_version}'

    return (base_url, versions, doc_version)

try:
    html_baseurl = get_base_url(outdir=None)[0]
except ValueError:
    pass

# Allow interactive bokeh plots in the documentation
try:
    import bokeh.resources
except ImportError:
    pass
else:
    html_js_files = bokeh.resources.CDN.js_files
    html_css_files = bokeh.resources.CDN.css_files

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

# For pydata theme
html_theme_options = {
    # Increase show_toc_level value to get API listings in sidebar
    "show_toc_level": 2,
    'navbar_start': ['navbar-logo', 'version-switcher']
}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'LISAdoc'

html_theme_options['announcement'] = f'''
<p>
<span class="versionmodified deprecated">
    This documentation was obtained by building the "master" git branch. LISA
    project has moved to the "main" branch. Please see the
    <a href="https://tooling.sites.arm.com/lisa/latest">latest
    documentation</a>.
</span>
</p>

{html_theme_options.get('announcement', '')}
'''

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    # 'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    ('index', 'LISA.tex', 'LISA Documentation',
   'ARM-Software', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'lisa', 'LISA Documentation',
     ['ARM-Software'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    ('index', 'LISA', 'LISA Documentation',
   'ARM-Software', 'LISA', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'pandas': ('https://pandas.pydata.org/pandas-docs/stable/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'holoviews': ('https://holoviews.org/', None),
    'polars': ('https://docs.pola.rs/py-polars/html/', None),
    # XXX: Doesn't seem to work, might be due to how devlib doc is generated
    'devlib': ('https://devlib.readthedocs.io/en/latest/', None),
    'wa': ('https://workload-automation.readthedocs.io/en/latest/', None),
    'ipywidgets': ('https://ipywidgets.readthedocs.io/en/latest/', None),
    'IPython': ('https://ipython.readthedocs.io/en/stable/', None),
    'typeguard': ('https://typeguard.readthedocs.io/en/stable/', None),
}

manpages_url = "https://manpages.debian.org/{path}"

#
# Fix autodoc
#

# Include __init__ docstrings (obviously)
autoclass_content = 'both'

autodoc_member_order = 'bysource'

autodoc_default_options = {
    # Show the members of the documented entity (e.g. class or module)
    'members': None,
    # autodoc_process_inherited_members() will replace docstrings for each
    # inherited member instance with a stub that links to the definition in the
    # base class. That sidesteps the issue of the docstring of the inherited
    # member not being valid reST.
    'inherited-members': None,
    # Show parent class
    'show-inheritance': None,
    # Show members even if they don't have docstrings
    'undoc-members': None,
    # Show special methods such as __and__
    'special-members': None,
    # Note: we make use of it in our custom autodoc-skip-member hook to ensure
    # it is always honored, even when some members are explicitly excluded.
    # On top of that, some functions are always excluded (see the hook
    # implementation for the details).
    'exclude-members': ','.join([
        # All the classes in lisa have their __init__ signature documented in
        # the class docstring
        '__init__',

        # Uninteresting
        '__doc__',
        '__weakref__',
        '__module__',
        '__abstractmethods__',
        '__slotnames__',
        '__eq__',
        '__str__',
        '__repr__',
        '__dict__',
        '__annotations__',
        '__instance_dir__',
    ])
}
autodoc_inherit_docstrings = True

non_ignored_refs = {
    r'lisa\..*',
}
non_ignored_refs = set(map(re.compile, non_ignored_refs))


# Workaround for: https://github.com/jupyter-widgets/ipywidgets/issues/3930
# Suggested: https://github.com/sphinx-doc/sphinx/issues/12585#issuecomment-2228420035
suppress_warnings = [
    'intersphinx.external',
]


# Workaround for: https://github.com/sphinx-doc/sphinx/issues/11279
viewcode_follow_imported_members = False


def setup(app):
    setup_logging(level=logging.INFO)

    # Do not rely on LISA_HOME as it may not be set and will default to current
    # folder, which is not what we want here.
    home = Path(__file__).parent.parent.resolve()

    enable_plots = bool(int(getvar('LISA_DOC_BUILD_PLOT', '1')))

    plots, configs = prepare(
        home=home,
        enable_plots=enable_plots,
        outdir=Path(app.outdir),
    )

    _autodoc_process_analysis_plots_handler = functools.partial(
        autodoc_process_analysis_plots,
        plots={
            get_obj_name(x): fig
            for x, fig in plots.items()
        }
    )
    _autodoc_skip_member_handler = functools.partial(
        autodoc_skip_member_handler,
        default_exclude_members=autodoc_default_options.get('exclude-members')
    )
    _intersphinx_warn_missing_reference_handler = functools.partial(
        intersphinx_warn_missing_reference_handler,
        non_ignored_refs=non_ignored_refs,
    )

    # Use a custom class so that a confused user could easily find it back in
    # the sources.
    class ExecState:
        def __init__(self, plots):
            self.plots = plots

    def update_config(app):
        conf = {
            # html_theme_options has already been read from app.config by the
            # time build-inited is called, so update the app.builder instead:
            # https://chrisholdgraf.com/blog/2022/sphinx-update-config/
            'html_theme_options': (app.builder, 'theme_options'),
        }
        for k, update in configs.items():
            _conf, _k  = conf.get(k, (app.config, k))
            v = getattr(_conf, _k, None)
            _v = update(v)
            setattr(_conf, _k, _v)
    app.connect("builder-inited", update_config)

    app.connect('warn-missing-reference', _intersphinx_warn_missing_reference_handler, priority=0)
    app.connect('autodoc-process-docstring', autodoc_process_test_method)
    app.connect('autodoc-process-docstring', autodoc_process_analysis_methods)
    app.connect('autodoc-process-docstring', autodoc_process_analysis_events)
    app.connect('autodoc-process-docstring', autodoc_ai_desc_process)
    app.connect('autodoc-process-docstring', _autodoc_process_analysis_plots_handler)

    # Applied at the end to ensure we can just fully replace the docstring content whole
    app.connect('autodoc-process-docstring', autodoc_process_inherited_members)
    app.connect('autodoc-process-signature', autodoc_process_inherited_signature)
    app.connect('autodoc-process-bases', autodoc_process_bases_handler)

    app.connect('env-merge-info', autodoc_ai_desc_merge)
    app.connect('build-finished', make_autodoc_ai_desc_build_finished(
        path='api_ai_descs.json',
        # We don't want to muddy search results with irrelevant data, so we
        # restrict it to the lisa Python package.
        filter_=lambda data: data['name'].startswith('lisa.')
    ))
    app.connect('autodoc-skip-member', _autodoc_skip_member_handler)
    app.connect('lisa-exec-state', lambda app: ExecState(plots=plots))

# vim :set tabstop=4 shiftwidth=4 textwidth=80 expandtab:
