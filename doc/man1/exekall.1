.\" Man page generated from reStructuredText.
.
.TH "EXEKALL" "1" "2019" "" "exekall"
.SH NAME
exekall \- test runner
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DESCRIPTION
.sp
\fBexekall\fP is a python\-based test runner. The expressions it executes are
discovered from Python PEP 484 parameter and return value annotations.
.SH OPTIONS
.SS exekall
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
usage: exekall [\-h] [\-\-debug] {run,merge,compare,show} ...

Test runner

PATTERNS
    All patterns are fnmatch pattern, following basic shell globbing syntax.
    A pattern starting with "!" is used as a negative pattern.
    

optional arguments:
  \-h, \-\-help            show this help message and exit
  \-\-debug               Show complete Python backtrace when exekall crashes.

subcommands:
  {run,merge,compare,show}

.ft P
.fi
.UNINDENT
.UNINDENT
.SS exekall run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
usage: exekall run [\-h] [\-s ID_PATTERN] [\-\-list]
                   [\-\-log\-level {debug,info,warn,error,critical}] [\-\-verbose]
                   [\-\-artifact\-root ARTIFACT_ROOT | \-\-artifact\-dir ARTIFACT_DIR]
                   [\-\-symlink\-artifact\-dir\-to SYMLINK_ARTIFACT_DIR_TO]
                   [\-\-load\-db LOAD_DB] [\-\-load\-type TYPE_PATTERN]
                   [\-\-load\-uuid LOAD_UUID | \-\-replay REPLAY]
                   [\-\-restrict CALLABLE_PATTERN] [\-\-forbid TYPE_PATTERN]
                   [\-\-allow CALLABLE_PATTERN]
                   [\-\-goal TYPE_PATTERN | \-\-callable\-goal CALLABLE_PATTERN]
                   [\-\-sweep CALLABLE_PATTERN PARAM START STOP STEP]
                   [\-\-param CALLABLE_PATTERN PARAM VALUE]
                   [\-\-template\-scripts SCRIPT_FOLDER] [\-\-adaptor ADAPTOR]
                   [\-n N] [\-\-share TYPE_PATTERN] [\-\-random\-order]
                   [\-\-conf CONF] [\-\-inject SERIALIZED_OBJECT_PATH]
                   PYTHON_MODULES [PYTHON_MODULES ...]

Run expressions

Note that the adaptor in the customization module is able to add more
parameters to \(ga\(gaexekall run\(ga\(ga. In order to get the complete set of options,
please run \(ga\(gaexekall run YOUR_SOURCES_OR_MODULES \-\-help\(ga\(ga.
    

positional arguments:
  PYTHON_MODULES        Python modules files or module names. If passed a folder, all
                        contained files recursively are selected. By default, the current
                        directory is selected.

optional arguments:
  \-h, \-\-help            show this help message and exit
  \-s ID_PATTERN, \-\-select ID_PATTERN
                        Only run the expressions with an ID matching any of the supplied
                        filters.
  \-\-list                List the expressions that will be run without running them.
  \-\-log\-level {debug,info,warn,error,critical}
                        Change the default log level of the standard logging module.
  \-\-verbose, \-v         More verbose output. Can be repeated for even more verbosity. This
                        only impacts exekall output, \-\-log\-level for more global settings.
  \-\-artifact\-root ARTIFACT_ROOT
                        Root folder under which the artifact folders will be created. Defaults
                        to EXEKALL_ARTIFACT_ROOT env var.
  \-\-artifact\-dir ARTIFACT_DIR
                        Folder in which the artifacts will be stored. Defaults to
                        EXEKALL_ARTIFACT_DIR env var.
  \-\-symlink\-artifact\-dir\-to SYMLINK_ARTIFACT_DIR_TO
                        Create a symlink pointing at the artifact dir.
  \-\-load\-db LOAD_DB     Reload a database to use some of its objects. The DB and its artifact
                        directory will be merged in the produced DB at the end of the
                        execution, to form a self\-contained artifact directory.
  \-\-load\-type TYPE_PATTERN
                        Load the (indirect) instances of the given class from the database
                        instead of the root objects.
  \-\-load\-uuid LOAD_UUID
                        Load the given UUID from the database.
  \-\-replay REPLAY       Replay the execution of the given UUID, loading as much prerequisite
                        from the DB as possible.
  \-\-restrict CALLABLE_PATTERN
                        Callable names patterns. Types produced by these callables will only
                        be produced by these (other callables will be excluded).
  \-\-forbid TYPE_PATTERN
                        Fully qualified type names patterns. Callable returning these types or
                        any subclass will not be called.
  \-\-allow CALLABLE_PATTERN
                        Allow using callable with a fully qualified name matching these
                        patterns, even if they have been not selected for various reasons.
  \-\-goal TYPE_PATTERN   Compute expressions leading to an instance of a class with name
                        matching this pattern (or a subclass of it).
  \-\-callable\-goal CALLABLE_PATTERN
                        Compute expressions ending with a callable which name is matching this
                        pattern.
  \-\-sweep CALLABLE_PATTERN PARAM START STOP STEP
                        Parametric sweep on a function parameter. It needs five fields:
                            * pattern matching qualified name of the callable
                            * name of the parameter
                            * start value
                            * stop value
                            * step size.
  \-\-param CALLABLE_PATTERN PARAM VALUE
                        Set a function parameter. It needs three fields:
                            * pattern matching qualified name of the callable
                            * name of the parameter
                            * value
  \-\-template\-scripts SCRIPT_FOLDER
                        Only create the template scripts of the expressions without running
                        them.
  \-\-adaptor ADAPTOR     Adaptor to use from the customization module, if there is more than
                        one to choose from.
  \-n N                  Run the tests for a number of iterations.
  \-\-share TYPE_PATTERN  Class name pattern to share between multiple iterations.
  \-\-random\-order        Run the expressions in a random order, instead of sorting by name.

LISA:
  LISA custom options.
  Can only be specified *after* positional parameters.

  \-\-conf CONF           LISA configuration file. If multiple configurations of a given type
                        are found, they are merged (last one can override keys in previous
                        ones)
  \-\-inject SERIALIZED_OBJECT_PATH
                        Serialized object to inject when building expressions

.ft P
.fi
.UNINDENT
.UNINDENT
.SS exekall compare
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
usage: exekall compare [\-h] db db

Compare two DBs produced by exekall run.

Note that the adaptor in the customization module recorded in the database
is able to add more parameters to \(ga\(gaexekall compare\(ga\(ga. In order to get the
complete set of options, please run \(ga\(gaexekall compare DB1 DB2 \-\-help\(ga\(ga.

Options part of a custom group will need to be passed after positional
arguments.
    

positional arguments:
  db          DBs created using exekall run to compare.

optional arguments:
  \-h, \-\-help  show this help message and exit

.ft P
.fi
.UNINDENT
.UNINDENT
.SS exekall show
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
usage: exekall show [\-h] db

Show the content of a ValueDB created by exekall \(ga\(garun\(ga\(ga

Note that the adaptor in the customization module recorded in the database
is able to add more parameters to \(ga\(gaexekall show\(ga\(ga. In order to get the
complete set of options, please run \(ga\(gaexekall show DB \-\-help\(ga\(ga.

Options part of a custom group will need to be passed after positional
arguments.
    

positional arguments:
  db          DB created using exekall run to show.

optional arguments:
  \-h, \-\-help  show this help message and exit

.ft P
.fi
.UNINDENT
.UNINDENT
.SS exekall merge
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
usage: exekall merge [\-h] \-o OUTPUT [\-\-copy] artifact_dirs [artifact_dirs ...]

Merge artifact directories of "exekall run" executions.

By default, it will use hardlinks instead of copies to improve speed and
avoid eating up large amount of space, but that means that artifact
directories should be treated as read\-only.
    

positional arguments:
  artifact_dirs         Artifact directories created using "exekall run", or value databases
                        to merge.

optional arguments:
  \-h, \-\-help            show this help message and exit
  \-o OUTPUT, \-\-output OUTPUT
                        
                        Output merged artifacts directory or value database. If the
                        output already exists, the merged DB will only contain the same roots
                        as this one. This allows patching\-up a pruned DB with other DBs that
                        contains subexpression\(aqs values.
  \-\-copy                Force copying files, instead of using hardlinks.

.ft P
.fi
.UNINDENT
.UNINDENT
.SH EXECUTING EXPRESSIONS
.sp
Expressions are built by scanning the python source code passed to \fBexekall
run\fP\&. Selecting which expression to execute using \fBexekall run\fP can be
achieved in several ways:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fB\-\-select\fP/\fB\-s\fP with a pattern matching an expression ID. Pattern
prefixed with \fB!\fP can be used to exclude some expressions.
.IP \(bu 2
Pointing \fBexekall run\fP at a subset of python source files, or to module
names. Only files (directly or indirectly) imported from these python
modules will be scanned for callables.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Once the expressions are selected, multiple iterations of it can be executed
using \fB\-n\fP\&. \fB\-\-share TYPE_PATTERN\fP can be used to share part of the expression
graph between all iterations, to avoid re\-executing some parts of the
expression. Be aware that all parameters of what is shared will also be shared
implicitly to keep consistent expressions.
.sp
The adaptor found in the customization module of the python sources you are
using can add extra options to \fBexekall run\fP, which are shown in \fB\-\-help\fP
only when these sources are specified as well.
.SH EXPRESSION ENGINE
.sp
At the core of \fBexekall\fP is the expression engine. It is in charge of
building sensible sequences of calls out of python\-level annotations (see PEP
484), and then executing them. An expression is a graph where each node has
named \fIparameters\fP that point to other nodes.
.SS Expression ID
.sp
Each expression has an associated ID that is derived from its structure. The rules are:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
The ID of the first parameter of a given node is prepended to the ID of
the node, separated with \fB:\fP\&.  The code \fBf(g())\fP has the ID
\fBg:f\fP\&.
.IP 2. 3
The ID of the node is composed of the name of the operator of that node
(name of a Python callable), followed by a
parenthesis\-enclosed list of parameters ID, excluding the first
parameter. The code \fBf(p1=g(), p2=h(k()))\fP has the ID
\fBg:f(p2=k:h)\fP\&.
.IP 3. 3
Expression values can have named tags attached to them. When displaying
the ID of such a value, the tag would be inserted right after the
operator name, inside brackets. The value returned by \fBg\fP tagged with a
tag named \fBmytag\fP with value \fB42\fP would give:
\fBg[mytag=42]:f(p2=k:h)\fP\&. Note that tags are only relevant when using
expression values, since the tags are attached to values, not operators.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The first rule allows seamless composition of simple pipeline stages and is
especially suited to object oriented programming, since the first parameter of
methods will be \fBself\fP\&.
.sp
Tags can be used to add attach some important metadata to the return value of
an operator, so it can be easily distinguished when taken out of context.
.SS Sharing subexpressions
.sp
When multiple expressions are to be executed, \fBexekall\fP will eliminate common
subexpressions. That will apply both inside an expression and between different
expressions. That avoids re\-executing the same operator multiple times if it
can be reused and if it would have been called with the same parameters. That
also ensures that referring to a given type for a parameter will give back the
same object within any given expression. Executing the IDs \fBg:f(p2=g)\fP and
\fBg:h\fP will translate to an expression graph equivalent to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
x = g()
res1 = f(x, p2=x)
res2 = h(x)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The expression execution engine logs when a given value is computed or reused.
.SS Execution
.sp
Executing an expression means evaluating each node if it has not already been
evaluated. If an operator is not reusable, it will always be called when a
value is requested from it, even if some existing values computed with the same
parameters exist. By default, all operators are reusable, but some types can be
flagged as non\-reusable by the customization module (see \fI\%Customizing exekall\fP).
.sp
Operators are allowed to be generator functions as well. In that case, the
engine will iterate over the generator, and will execute the downstream
expressions for each value it provides. Multiple generator functions can be
chained, leading to a cascade of values for the same expression.
.sp
Once an expression has been executed, all its values will get a UUID that can
be used to uniquely refer to it, and track where it was used in the logs.
.SH EXPLOITING ARTIFACTS
.sp
\fBexekall run\fP produces an artifact folder. The location can be set using
\fB\-\-artifact\-dir\fP and other options.
.SS Folder hierarchy
.sp
The artifact folder contains the following files:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBINFO.log\fP and \fBDEBUG.log\fP contain logs for info and debug levels of the
\fBlogging\fP standard module. Note that standard output is not included in
this log, as it does not go through the \fBlogging\fP module
.IP \(bu 2
\fBValueDB.pickle.xz\fP contains a serialized objects graph for each
expression that was executed. The value of each subexpression is included
if the object was serializable.
.IP \(bu 2
\fBBY_UUID\fP contains symlinks named after UUIDs, and pointing to a
relevant subfolder in the artifacts. That allows quick lookup of the
artifacts of a given expression if one has its UUID.
.IP \(bu 2
A folder for each expression.
.IP \(bu 2
Optionally, an \fBORIGIN\fP folder if the artifact folder is the result of
\fBexekall merge\fP, or \fBexekall run \-\-load\-db\fP\&. It contains the hierarchy
of each original artifact folder by using folders and symlinks pointing
inside the artifact folder.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Inside each expression\(aqs folder, there is a folder with the UUID of the
expression itself. Having that level allows merging artifact folders together
and avoids conflict in case two different expressions share the same ID.
.sp
Inside that folder, the following files can be found:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBSTRUCTURE\fP which contains the structure of the expression. Each
operator is described by its callable name, its return type, and its
parameters. Parameters are recursively defined the same way. An \fBsvg\fP or
\fB\&.dot\fP (graphviz) variant may exist as well.
.IP \(bu 2
\fBEXPRESSION.py\fP and \fBTEMPLATE_EXPRESSION.py\fP files are executable
Python script that are equivalent to what was executed by \fBexekall run\fP\&.
The template one is created before execution and contains some
placeholders for the sparks. The other one is updated after execution to
add commented code that reloads any given value from the database. That
gives the option to the user to not re\-execute some part of the code, but
load a serialized value instead.
.IP \(bu 2
Artifact folders allocated by some operators.
.UNINDENT
.UNINDENT
.UNINDENT
.SS exekall compare
.sp
\fBValueDB.pickle.xz\fP can be compared using \fBexekall compare\fP\&. This will call the
comparison method of the adaptor that was used when \fBexekall run\fP was
executed. That function is expected to compare the expression values found in
the databases, by matching values that have the same ID on both databases.
.SH ADDING NEW EXPRESSIONS
.sp
Since \fBexekall run\fP will discover expressions based on type annotations of
callable parameters and return value, all that is needed to extend an existing
package is to write new callables with such annotations. It is possible to use
a base class in an annotation, in which case the engine will be free to pick
all the subclasses it can, and produce an expression with each. A dummy example
would be:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import abc
class BaseConf(abc.ABC):
   @abc.abstractmethod
   def get_conf(self):
      pass

class Conf(BaseConf):
   # By default, callables with an empty parameter list are ignored. They
   # can be explicitly be used with "exekall run \-\-allow \(aq*Conf\(aq"
   def __init__(self):
      self.x = 42

   def get_conf(self):
      return x

class Stage1:
   # exekall recognizes classes as a special case: the parameter annotations
   # are taken from __init__ and the return type is the class
   def __init__(self, conf:BaseConf):
      print("building stage1")
      self.conf = conf

   # first parameter of methods is automatically annotated with the right
   # class.
   # "forward\-references are possible by using a string to annotate.
   def process_method(self) \-> \(aqStage2\(aq:
      return Stage2(x.conf.x == 42)

class Stage2:
   def __init__(self, passed):
      self.passed = passed

def process1(x:Stage1) \-> Stage2:
   return Stage2(x.conf.x == 42)

def process2(x:Stage1, conf:BaseConf, has_default_val=33) \-> Stage2:
   return Stage2(x.conf.x == 0)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
From that, \fBexekall run \-\-allow \(aq*Conf\(aq \-\-goal \(aq*Stage2\(aq\fP would infer the
expressions \fBConf:Stage1:process_method\fP, \fBConf:Stage1:process1\fP and
\fBConf:Stage1:process2(conf=Conf)\fP\&. The common subexpression \fBConf:Stage1\fP would be
shared between these two by default.
.sp
If a parameter has a default value, its annotation can be omitted. If a
parameter has both a default value and an annotation, \fBexekall\fP will try to
provide a value for it, or use the default value if no subexpression has the right
type.
.sp
When an expression is not detected correctly, \fB\-\-verbose\fP/\fB\-v\fP can be used and
repeated twice to get more information on what callables are being ignored and
why. Most common issues are:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Partial annotations: all parameters and return values need to be either
annotated or have a default value.
.IP \(bu 2
Abstract Base Classes (see \fBabc.ABC\fP) with missing implementation
of some attributes.
.IP \(bu 2
Cycles in the expression graphs. Considering types as pipeline stages
helps avoiding cycles in expression graphs when architecturing a module.
Not all classes need to be considered as such, only the ones that will be
used in annotations.
.IP \(bu 2
Missing "spark", i.e. operator that can provide values without any
parameter. The adaptor in the customization module usually takes care of
doing that based on domain\-specific command line options, but some ignored
callables may be forcefully selected using \fB\-\-allow\fP if needed.
.IP \(bu 2
Missing \fBimport\fP chain from the sources given to \fBexekall run\fP to the
module that defines the callable that is expected to be used. That can be
solved by adding more \fBimport\fP statements, or simply giving that source
file directly to \fBexekall run\fP\&.
.IP \(bu 2
Wrong goal selected using \fB\-\-goal\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SH CUSTOMIZING EXEKALL
.sp
The behavior of \fBexekall\fP can be customized by subclassing
\fBexekall.customization.AdaptorBase\fP in a module that must be called
\fBexekall_customization.py\fP and located in one of the parent packages of the
modules that are explicitly passed to \fBexekall run\fP\&.  This allows adding
extra options to \fBexekall run\fP and \fBcompare\fP, tag values in IDs, change the
set of callables that will be hidden from the ID and define what type is
considered to provide reusable values by the engine among other things.
.SH AUTHOR
ARM-Software
.SH COPYRIGHT
2019, ARM-Software
.\" Generated by docutils manpage writer.
.
