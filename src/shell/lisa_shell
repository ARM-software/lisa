#! /bin/bash
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2015, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# LISA Shell: the Linux Integrated System Analysis Shell

# Setup colors
source src/shell/lisa_colors

# By default use internal libraries
DEVMODE=${DEVMODE:-1}

# Get base installation path of LISA
export LISA_HOME="$(pwd)"

export PYTHONPATH=''
export PYTHONPATH=$LISA_HOME/libs/utils:$PYTHONPATH
export PYTHONPATH=$LISA_HOME/libs/wlgen:$PYTHONPATH
export PYTHONPATH=$LISA_HOME:$PYTHONPATH

if [ "x$DEVMODE" == "x1" ]; then
    export PYTHONPATH=$LISA_HOME/libs/devlib:$PYTHONPATH
    export PYTHONPATH=$LISA_HOME/libs/trappy:$PYTHONPATH
    export PYTHONPATH=$LISA_HOME/libs/bart:$PYTHONPATH
fi

################################################################################
# Helpers
################################################################################

# Only clear the screen if stdout is a terminal, to avoid ASCII escape
# characters to be sent to a log file for example.
function clear {
    case "$-" in
        *i*) test -t 1 && command clear ;;
        *) ;;
    esac
}

################################################################################
# Generic LISA Shell commands
################################################################################

# LISA Shell On-Line HELP
function lisa-help {
clear
echo -e "$LISASHELL_HELP"
echo "                                                                               "
echo "                    .:: LISA Shell - HELP On-Line ::.                          "
echo "                                                                               "
echo -ne "$LISASHELL_RESET$LISASHELL_GREEN"
cat $LISA_HOME/LisaShell.txt
echo -ne "$LISASHELL_DEFAULT"
}

function lisa-version {
echo -ne "$LISASHELL_GREEN"
cat <<EOF

.:: LISA ($(git describe --all))

LISA commit: $(git rev-parse --short=11 HEAD)
Submodules version:
$(git submodule status)


EOF
echo -ne "$LISASHELL_DEFAULT"
}

################################################################################
# LISA Update utility functions
################################################################################

function _lisa-update-usage {
    echo "Usage: lisa-update (CMD)"
    echo "  CMD: what to update (default: all)"
    echo "       all - update lisa and all the external dependencies"
    echo "       submodules - update external dependencies provided by submodules"
    echo
    echo "Update submodules (if DEVMODE enabled)"
}

function _lisa-update-submodules {
echo -ne "${LISASHELL_BLUE}"
if [ "x$DEVMODE" == "x1" ]; then
    # Force update existing modules
    echo
    echo 'Developer mode ENABLED, updating local libraries...'
    git submodule sync
    git submodule update --init
    echo 'DONE'
fi
echo -ne "$LISASHELL_DEFAULT"
}

function _lisa-update-all {
echo -ne "${LISASHELL_BLUE}"
echo -e "*** Update LISA installation"

git update-index -q --refresh
ret=$?
if [ $ret -ne 0 ]; then
    echo "LISA internal error: git update-index failed"
    echo "Please report it: https://github.com/ARM-software/lisa/issues"
    return $ret
fi

git diff-index --quiet --ignore-submodules HEAD
ret=$?
if [ $ret -ne 0 ]; then
    echo "There are outstanding uncommitted changes."
    echo "Please, commit your changes or stash them before you can update lisa"
    return $ret
fi

curr_commit=$(git rev-parse HEAD)
remote_name=$(git remote -v | grep -i ARM-software/lisa | grep -m 1 fetch | awk '{print $1}')
if [ -z "$remote_name" ]; then
    echo "Couldn't find ARM-Software upstream remote, can't automatically update"
    return 1
fi
git merge-base --is-ancestor $curr_commit $remote_name/master
ret=$?
if [ $ret -ne 0 ]; then
    echo "You have committed changes that are not part of $remote_name/master"
    echo "Please move to the master branch before running lisa-update"
    return $ret
fi

git pull --ff-only $remote_name master
ret=$?
if [ $ret -ne 0 ]; then
    # git pull should have printed some error.  Abort and propagate the error code.
    return $ret
fi

_lisa-update-submodules

echo -ne "$LISASHELL_DEFAULT"
}

function lisa-update {
CMD=${1:-all}
echo
case "x${CMD^^}" in
'xSUBMODULES')
    _lisa-update-submodules
    ;;
'xALL')
    _lisa-update-all
    ;;
"xHELP"|*)
    _lisa-update-usage
    ;;
esac
echo
echo
}

################################################################################
# LISA Notebooks utility functions
################################################################################

function _lisa-ipython-usage {
    echo "Usage: lisa-ipython CMD [NETIF [PORT]]"
    echo " CMD     - IPython Notebooks command (deafult: start)"
    echo "  start  start the ipython server"
    echo "   stop  stop the ipython server"
    echo " NETIF   - the network interface to start the server on (default: lo)"
    echo " PORT    - the tcp port for the server (default: 8888)"
}

function _lisa-ipython-start {
# Get IP address for the specified interface
IPADDR=

if [ -x /sbin/ifconfig ]; then
    IPADDR=$(/sbin/ifconfig $NETIF 2>/dev/null  | \
        awk '/inet / {print $2}' | \
        grep -Eo [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)
fi

if [ "x$IPADDR" == "x" -a -x /sbin/ip ]; then
    IPADDR=$(/sbin/ip a show dev $NETIF 2>/dev/null | \
        awk '/inet / { gsub("/.*", ""); print $2; }')
fi

if [ "x$IPADDR" == "x" ]; then
    echo
    echo "could not determine IP address of $NETIF"
    echo
    echo "Usage: $0 <NETIF>"
    echo " NETIF - The network interface to start the server on"
    echo
    return 1
fi
# Setup paths
PYDIR="$LISA_HOME/ipynb"
LOGFILE="$PYDIR/server.log"
PIDFILE="$PYDIR/server.pid"
URLFILE="$PYDIR/server.url"

# Generate server URL
TOKEN=$(cat /dev/urandom | tr -dc 'a-fA-F0-9' | fold -w 48 | head -n 1)
URL="http://$IPADDR:$PORT/?token=$TOKEN"

# Check if an instance is already running
if [ -f "$PIDFILE" ] && pgrep -F $PIDFILE >/dev/null; then
    echo "Server already running:"
    echo "  " $(cat $URLFILE)
    xdg-open $(cat $URLFILE)
    return 1
fi

# Start the server bindeed to the specified interface
echo
echo 'Notebook server configuration:'
echo '  URL        : ' $URL
echo '  Folder     : ' $PYDIR
echo '  Logfile    : ' $LOGFILE
echo '  PYTHONPATH : '
echo -e "\t${PYTHONPATH//:/\\n\\t}"
cd $PYDIR
echo
echo -n 'Notebook server task: '
if which ipython >/dev/null; then
    local cmd=ipython
else
    local cmd=jupyter
fi
nohup $cmd notebook --ip=$IPADDR --port=$PORT \
                    --NotebookApp.token=$TOKEN \
                    >$LOGFILE 2>&1 &
echo $! >$PIDFILE
echo $URL >$URLFILE
cd - >/dev/null
}

function _lisa-ipython-stop {
PYDIR="$LISA_HOME/ipynb"
PIDFILE="$PYDIR/server.pid"
if [ -f "$PIDFILE" ] && pgrep -F $PIDFILE >/dev/null; then
    kill $(<$PIDFILE) 2>/dev/null
fi
rm -f $PIDFILE 2>/dev/null
}

function lisa-ipython {
CMD=${1:-start}

if [ "x$2" == "x" -a $USER == "vagrant" -a -e /vagrant/src/shell/lisa_shell ]; then
    # NETIF not set and we are in a vagrant environment.  Default to
    # eth0 as loopback won't let you connect from your host machine.
    NETIF="eth0"
else
    NETIF=${2:-lo}
fi

PORT=${3:-8888}
echo
case "x${CMD^^}" in
'xSTART')
    echo "Starting IPython Notebooks..."
    _lisa-ipython-start $NETIF $PORT
    ;;
'xSTOP')
    echo "Stopping IPython Notebooks..."
    _lisa-ipython-stop
    ;;
"xHELP"|*)
    _lisa-ipython-usage
    ;;
esac
echo
echo
}

function lisa-check-submods {
if [ ! -f ./libs/devlib/setup.py ] ||
   [ ! -f ./libs/bart/setup.py ] ||
   [ ! -f ./libs/trappy/setup.py ]; then
    echo "One or more submodules missing, updating";
    lisa-update submodules
fi
}

################################################################################
# LISA Tests utility functions
################################################################################

function _lisa-test-usage {
cat <<EOF
Usage: lisa-test [OPTIONS] [args] FILE[:CLASS]

  Run automated tests. Tests can be found under the tests/ directory.
  Only one python file can be specified at a time, otherwise the results might
  not be valid.

  Valid OPTIONS are:

  --iterations (or -n) sets the number of iterations to use for
    each workload/target-conf, for tests that support this usage. 0 means use
    the test's default iteration count.

  --target-conf (or -t) sets an alternative target.config file.

  --results-dir (or -o) sets the output directory of the tests.

  This is a wrapper for the 'nosetests' utility, additional arguments are passed
  to that tool.

  Examples:
    Run all EAS Generic tests:

      lisa-test tests/eas/generic.py

    Run RampUp test from EAS Generic suite:

      lisa-test tests/eas/generic.py:RampUp

    Run RampUp test from EAS Generic suite, generating an XML test
    report via nose's XUnit plugin (see nosetests documentation):

      lisa-test --with-xunit --xunit-file=report.xml tests/eas/generic.py:RampUp

    Run RampUp test from EAS Generic suite, repeating the
    workload 10 times and reporting how many times the test run
    passed:

      lisa-test --iterations 10 tests/eas/generic.py:RampUp

    Run EAS Generic suite, repeating each workload 10 times:

      lisa-test --iterations 10 tests/eas/generic.py
EOF
}

function _lisa-test {
if [ -n "$LISA_RESULTS_DIR" ]; then
  mkdir -p "$LISA_RESULTS_DIR"
  # There is no sensible place to store results.xml when the directory is not
  # set explicitely, as the Python scripts decide where to put the results..
  # Using results_latest symlink is not an option as it would race if using the
  # same tree to run multiple tests on different boards at the same time.
  local xunit_options=(--with-xunit --xunit-file="$LISA_RESULTS_DIR/results.xml")
fi
nosetests -v --nocapture --nologcapture    \
          --logging-config=logging.conf    \
          "${xunit_options[@]}"            \
          "$@"
}

function lisa-test {
local extra_args=()

echo
while [[ $# -gt 0 ]]; do
        case "$1" in
                help|-h|--help)
                        _lisa-test-usage
                        return 0
                        ;;
                -n|--iterations)
                        LISA_TEST_ITERATIONS="$2"
                        shift
                        ;;

                -t|--target-conf)
                        LISA_TARGET_CONF="$2"
                        shift
                        ;;
                -o|--results-dir)
                        LISA_RESULTS_DIR="$2"
                        shift
                        ;;
                *)
                        # Unrecognised args are passed through to nosetests
                        extra_args+=("$1")
                        ;;
        esac
        shift
done

if [ -z "${extra_args[*]}" ]; then
        # No arguments provided, default to "help"
        _lisa-test-usage
        return 1
fi

# Execute in a sub-shell
(
  export LISA_TEST_ITERATIONS LISA_TARGET_CONF LISA_RESULTS_DIR
  _lisa-test "${extra_args[@]}"
)
local retcode=$?
echo
echo
return $retcode
}

function lisa-report {
CMD=${1^^}
[ "x$CMD" != "xHELP" ] && CMD=report
echo
case "x${CMD^^}" in
'xREPORT')
    ./tools/report.py $*
    ;;
"xHELP"|*)
    ./tools/report.py --help
    ;;
esac
echo
echo
}


################################################################################
# LISA Workloads utility functions
################################################################################

export WLTEST_VENV="$LISA_HOME/tools/wa_venv"

function lisa-wltest-cleanup {
[ ! -d $WLTEST_VENV ] || rm -rf $WLTEST_VENV
}

function lisa-wltest-init {
export WLTEST_HOME="$LISA_HOME/tools/wltests"
export WLTEST_DL="$LISA_HOME/libs/devlib"
export WLTEST_WA="$LISA_HOME/tools/workload-automation"
export WA_USER_DIRECTORY="$LISA_HOME/tools/wa_user_directory"

# If the python virtual env existis:
# let's assume everithing has been already setup and we are ready to go
if [ -d $WLTEST_VENV ]; then
    source $WLTEST_VENV/bin/activate
    return 0
fi

# Check for require dependencies
which virtualenv &>/dev/null
if [ $? -ne 0 ]; then
cat <<EOF

    ERROR: No virtualenv support found for Python!

    Please install virtualenv  before running this command.
    You can install it on Ubuntu systems with:
        $> pip install virtualenv

EOF
    return -1
fi

# Create and activate a python's virtual environment to be used for the
# installation of the required version of external libraries and tools
virtualenv $WLTEST_VENV
source $WLTEST_VENV/bin/activate

# Clone Workload Automation and install it in the virtual environment
_lisa-update-submodules
pip install -e $WLTEST_WA
pip install -e $WLTEST_DL

# Leave the virtualenv once setup completed
deactivate
}

function lisa-wltest-series {

# Check that the environment is properly configured
if [ -z $ANDROID_HOME ]; then
cat <<EOF

    ERROR: No Android SDK found!

    Please point ANDROID_HOME to your local Android SDK.

EOF
    return -1
fi

# Check for required external dependencies
which realpath &>/dev/null
if [ $? -ne 0 ]; then
    cat <<EOF

    ERROR: this script requires the realpath binary!

    You can install it on Ubuntu systems with:
        $> sudo apt-get install coreutils

EOF
    return -1
fi

# Ensure the wltest environment has been configured, and get the relative
# patch loaded in the environment
lisa-wltest-init
[ $? -eq 0 ] || exit -1

# Setup Python virutal env, only if not already done
echo $PATH | grep wa_venv &>/dev/null
[ $? -eq 0 ] || source $WLTEST_VENV/bin/activate

# Run the build's provided test_series
$WLTEST_HOME/test_series "$@"

# Leave the virtualenv once tests completed
deactivate
}

################################################################################
# LISA Shell buildroot rootfs generation functions
################################################################################

function lisa-buildroot-create-rootfs {
	"$LISA_HOME/src/shell/lisa_buildroot_create_rootfs" "$@"
}

function lisa-buildroot-update-kernel-config {
	"$LISA_HOME/src/shell/lisa_buildroot_update_kernel_config" "$@"
}

################################################################################
# LISA Shell MAIN
################################################################################

# Setup Shell variables
PS1="\[${LISASHELL_BLUE}\][LISAShell \[${LISASHELL_LCYAN}\]\W\[${LISASHELL_BLUE}\]] \> \[${LISASHELL_RESET}\]"

# Dump out a nice LISA Shell logo
clear
echo -e "$LISASHELL_BANNER"

echo "                                                                               "
echo "                        .:: LISA Shell ::.                                     "
echo "                                                                               "
echo -ne "$LISASHELL_RESET$LISASHELL_BLUE"
cat <<EOF

Welcome to the Linux Integrated System Analysis SHELL!

version $(git rev-parse --short=11 HEAD)
LISA_HOME  : $LISA_HOME
PYTHONPATH :
EOF
echo -e "\t${PYTHONPATH//:/\\n\\t}"

if [ "x$DEVMODE" == "x1" ]; then
lisa-check-submods
cat <<EOF
Submodules :
EOF
git submodule status
fi

cat <<EOF


Type "lisa-help" for on-line help on available commands

EOF

# Setup default SHELL text color
echo -e "$LISASHELL_DEFAULT"

# vim :set tabstop=4 shiftwidth=4 textwidth=80 expandtab
