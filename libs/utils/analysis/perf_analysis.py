# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2015, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import glob
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
import pylab as pl
import re
import sys
import trappy

from analysis_module import AnalysisModule

# Configure logging
import logging

# Regexp to match an rt-app generated logfile
TASK_NAME_RE = re.compile('.*\/rt-app-(.+)-[0-9]+.log')

class PerfAnalysis(AnalysisModule):

    def __init__(self, trace):
        super(PerfAnalysis, self).__init__(trace)

        # Dataframe of all tasks performance data
        self._perf_data = {}

        # Load performance data generated by rt-app workloads
        self._loadRTAData(self._data_dir)

        # Keep track of the self._data_dir from where data have been loaded
        if len(self._perf_data) == 0:
            logging.warning('      No performance data found in:')
            logging.warning('        %s', self._data_dir)
            return None

###############################################################################
# DataFrame Getter Methods
###############################################################################

    def _dfg_rtapp_samples(self, task):
        """
        Performance data for the specified task.

        This is a DataFrame containing the metrics reporeted by RTApp in the
        logfile of the specified task.

        :param task: the task we want the data for
        :type task: str
        """
        if self._data_dir is None:
            raise ValueError("rt-app performance data not (yet) loaded")
        if task not in self._perf_data:
            raise ValueError('No dataframe loaded for task [{0:s}]'\
                    .format(task))
        return self._perf_data[task]['df']

    def _dfg_rtapp_tasks(self):
        """
        Tasks for which performance data have been loaded

        :param task: the task we want the data for
        :type task: str
        """
        if self._data_dir is None:
            raise ValueError("rt-app performance data not (yet) loaded")

        data = []
        for task in self._perf_data.keys():
            pid = self._trace.getTaskByName(task)[0]
            logfile = self._perf_data[task]['logfile']
            data.append((pid, task, logfile))

        df = pd.DataFrame(data, columns=['pid', 'comm', 'logfile'])
        df.set_index('pid', inplace=True)

        return df


###############################################################################
# Plotting Methods
###############################################################################

    def plotRTAppPerf(self, task, title=None):
        """
        Plot the Latency/Slack and Performance data for the specified task
        """

        if not isinstance(task, int) and \
           not isinstance(task, str):
               raise ValueError('unsupported parameter value, '
                                '"task" must be either a PID or task name.')
        # Get task PID and Name
        try:
            if isinstance(task, int):
                pid = task
                name = self._trace.getTaskByPid(pid)[0]
            else:
                name = task
                pid = self._trace.getTaskByName(name)[0]
        except:
            raise ValueError("Task [{}] not found".format(task))

        rtapp_tasks = self._dfg_rtapp_tasks()
        if pid not in rtapp_tasks.index.tolist():
            raise ValueError('Task [{}:{}] is not an RTApp instance'\
                             .format(pid, name))

        task_name = "{}:{}".format(pid, name)
        df = self._dfg_rtapp_samples(name)

        # Grid
        gs = gridspec.GridSpec(2, 2, height_ratios=[4,1], width_ratios=[3,1]);
        gs.update(wspace=0.1, hspace=0.1);
        # Figure
        plt.figure(figsize=(16, 2*6));
        if title:
            plt.suptitle(title, y=.97, fontsize=16,
                    horizontalalignment='center');

        # Plot: Slack and Latency
        axes = plt.subplot(gs[0,0]);
        axes.set_title('Task [{}] (start) Latency and (completion) Slack'\
                       .format(task_name));
        data = df[['Slack', 'WKPLatency']]
        data.plot(ax=axes, drawstyle='steps-post', style=['r', 'g']);
        # axes.set_xlim(x_min, x_max);
        axes.xaxis.set_visible(False);

        # Plot: Performance
        axes = plt.subplot(gs[1,0]);
        axes.set_title('Task [{}] Performance Index'.format(task_name));
        data = df[['PerfIndex',]]
        data.plot(ax=axes, drawstyle='steps-post');
        axes.set_ylim(0, 2);
        # axes.set_xlim(x_min, x_max);

        # Plot: Slack Histogram
        axes = plt.subplot(gs[0:2,1]);
        data = df[['PerfIndex',]]
        data.hist(bins=30, ax=axes, alpha=0.4);
        # axes.set_xlim(x_min, x_max);
        pindex_avg = data.mean()[0];
        pindex_std = data.std()[0];
        logging.info('PerfIndex, Task [%s] avg: %.2f, std: %.2f',
                     task_name, pindex_avg, pindex_std)
        axes.axvline(pindex_avg, color='b', linestyle='--', linewidth=2);


        # Save generated plots into datadir
        figname = '{}/task_perf_{}.png'.format(self._data_dir, task)
        pl.savefig(figname, bbox_inches='tight')


###############################################################################
# Utility Methods
###############################################################################

    def _taskNameFromLog(self, logfile):
        tname_match = re.search(TASK_NAME_RE, logfile)
        if tname_match is None:
            raise ValueError('The logfile [{0:s}] is not from rt-app'\
                    .format(logfile))
        return tname_match.group(1)

    def _logfileFromTaskName(self, taskname):
        for logfile in glob.glob(
                '{0:s}/rt-app-{1:s}.log'.format(self._data_dir, taskname)):
            return logfile
        raise ValueError('No rt-app logfile found for task [{0:s}]'\
                .format(taskname))

    def _loadRTAData(self, datadir):
        """
        Load peformance data of an rt-app workload
        """

        # Lookup for all rt-app logfile into the specified datadir
        for logfile in glob.glob('{0:s}/rt-app-*.log'.format(datadir)):
            task_name = self._taskNameFromLog(logfile)

            self._perf_data[task_name] = {}
            self._perf_data[task_name]['logfile'] = logfile
            logging.debug('Found rt-app logfile for task [%s]', task_name)

        # Load all the found logfile into a dataset
        for task in self._perf_data.keys():
            logging.debug('Loading dataframe for task [%s]...', task)
            df = pd.read_table(self._perf_data[task]['logfile'],
                    sep='\s+',
                    skiprows=1,
                    header=0,
                    usecols=[1,2,3,4,7,8,9,10],
                    names=[
                        'Cycles', 'Run' ,'Period', 'Timestamp',
                        'Slack', 'CRun', 'CPeriod', 'WKPLatency'
                    ])
            # Normalize time to [s] with origin on the first event
            start_time = df['Timestamp'][0]/1e6
            df['Time'] = df['Timestamp']/1e6 - start_time
            df.set_index(['Time'], inplace=True)
            # Add performance metrics column, performance is defined as:
            #             slack
            #   perf = -------------
            #          period - run
            df['PerfIndex'] = df['Slack'] / (df['CPeriod'] - df['CRun'])

            # Keep track of the loaded dataframe
            self._perf_data[task]['df'] = df

