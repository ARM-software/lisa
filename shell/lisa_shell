#! /bin/sh
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2015, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# LISA Shell: the Linux Integrated System Analysis Shell

################################################################################
# Set environment variables
################################################################################

# By default use internal libraries
export LISA_DEVMODE=${LISA_DEVMODE:-1}

# Setup colors
source "$LISA_HOME/shell/lisa_colors"

# Add some shell utilities to the PATH, with lower priority than system's one
# in case the user needs a different version of them
export LISA_HOST_ABI=${LISA_HOST_ABI:-x86_64}
export PATH=$PATH:$LISA_HOME/shell/:$LISA_HOME/tools/$LISA_HOST_ABI

################################################################################
# Helpers
################################################################################

# Only clear the screen if stdout is a terminal, to avoid ASCII escape
# characters to be sent to a log file for example.
function clear {
    case "$-" in
        *i*) test -t 1 && command clear ;;
        *) ;;
    esac
}

################################################################################
# Generic LISA Shell commands
################################################################################

# LISA Shell On-Line HELP
function lisa-help {
    clear
    echo -e "$LISASHELL_HELP"
    echo "                                                                               "
    echo "                    .:: LISA Shell - HELP On-Line ::.                          "
    echo "                                                                               "
    echo -ne "$LISASHELL_RESET$LISASHELL_GREEN"
    cat "$LISA_HOME/shell/README.txt"
    echo -ne "$LISASHELL_DEFAULT"
}

function lisa-version {
    echo -ne "$LISASHELL_GREEN"
cat <<EOF

.:: LISA ($(git describe --all))

LISA commit: $(git rev-parse --short=11 HEAD)

EOF
    echo -ne "$LISASHELL_DEFAULT"
}

################################################################################
# LISA Install functions
################################################################################

export LISA_USE_VENV=${LISA_USE_VENV:-1}
export LISA_VENV_PATH=${LISA_VENV_PATH:-"$LISA_HOME/.lisa-venv3"}

function _lisa-venv-create {
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        # Make sure we don't nest venv, by calling deactivate if it exists,
        # otherwise it will fail with a symlink levels errors
        lisa-venv-deactivate || return 1

        echo "Creating LISA venv from scratch ($LISA_VENV_PATH) ..."
        # With --clear, the folder is emptied to create a fresh environment
        python3 -m venv --clear "$LISA_VENV_PATH"
    fi
}

function lisa-venv-activate {
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        # If the venv is not found, we install LISA in there
        if [[ ! -e "$LISA_VENV_PATH" ]]; then
            lisa-install || return 1
        fi
        echo "Activating LISA Python venv ($LISA_VENV_PATH) ..."
        VIRTUAL_ENV_DISABLE_PROMPT=1 source "$LISA_VENV_PATH/bin/activate"
    fi
}

function lisa-venv-deactivate {
    if type deactivate &>/dev/null; then
        echo "Deactivating LISA Python venv ($LISA_VENV_PATH) ..."
        deactivate
    fi
}

function _lisa-upgrade-pip {
    # Only upgrade pip when using the venv, so we don't touch the system-wide
    # install
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        lisa-venv-activate || return 1
        echo "Upgrading pip ..."
        python3 -m pip install --upgrade pip
    fi
}

function lisa-install {
    # Check that some prerequisites are available on the system, since they
    # cannot be installed using pip in a venv
    python3 "$LISA_HOME/setup.py" systemcheck

    _lisa-venv-create &&
    _lisa-upgrade-pip || return 1

    if [[ "$LISA_DEVMODE" == 1 ]]; then
        # This set of requirements will install all the shipped dependencies
        # in editable mode
        local requirements='devmode_requirements.txt'
    else
        # This one will install the packages that are developed here, but will
        # take the external dependencies from PyPI
        local requirements='requirements.txt'
    fi

    echo
    echo "Installing LISA packages ..."
    echo

    # Make sure we install all packages, even if they are satisfied by the
    # system's site-packages location. This ensures we use up to date packages,
    # and that the installation process will give the same result on all
    # machines at a given point in time.
    python3 -m pip install -r "$LISA_HOME/$requirements" "$@"
}

################################################################################
# LISA Update utility functions
################################################################################

function _lisa-update-usage {
    echo "Usage: lisa-update (CMD)"
    echo "  CMD: what to update (default: all)"
    echo "       all - update lisa and all the external dependencies"
    echo "       subtrees - update external dependencies provided by subtrees"
    echo
    echo "Update subtrees (if LISA_DEVMODE enabled)"
}

function _lisa-update-subtrees {
    echo -ne "${LISASHELL_BLUE}"
    if [[ "$LISA_DEVMODE" == 1 ]]; then
        # Force update existing modules
        echo
        echo 'Developer mode ENABLED, updating local libraries...'
        for-each-subtree.py "$LISA_HOME/external/subtrees.conf" --fetch pull --squash
        echo 'DONE'
    fi
    echo -ne "$LISASHELL_DEFAULT"
}

function _lisa-update-all {
    echo -ne "${LISASHELL_BLUE}"
    echo -e "*** Update LISA installation"


    if git update-index -q --refresh; then
        echo "LISA internal error: git update-index failed"
        echo "Please report it: https://github.com/ARM-software/lisa/issues"
        return $ret
    fi

    if git diff-index --quiet HEAD; then
        echo "There are outstanding uncommitted changes."
        echo "Please, commit your changes or stash them before you can update lisa"
        return $ret
    fi

    curr_commit=$(git rev-parse HEAD)
    remote_name=$(git remote -v | grep -i ARM-software/lisa | grep -m 1 fetch | awk '{print $1}')
    if [[ -z "$remote_name" ]]; then
        echo "Couldn't find ARM-Software upstream remote, can't automatically update"
        return 1
    fi

    if git merge-base --is-ancestor $curr_commit $remote_name/master; then
        echo "You have committed changes that are not part of $remote_name/master"
        echo "Please move to the master branch before running lisa-update"
        return $ret
    fi


    if git pull --ff-only $remote_name master; then
        # git pull should have printed some error.  Abort and propagate the error code.
        return $ret
    fi

    echo -ne "$LISASHELL_DEFAULT"
}

function lisa-update {
    CMD=${1:-all}
    echo
    case "$CMD" in
    subtrees)
        _lisa-update-subtrees
        ;;
    all)
        _lisa-update-all
        ;;
    help|*)
        _lisa-update-usage
        ;;
    esac
    echo
    echo
}

################################################################################
# LISA Notebooks utility functions
################################################################################

function _lisa-jupyter-usage {
    echo "Usage: lisa-jupyter CMD [NETIF [PORT]]"
    echo " CMD     - Jupyter Notebooks command (deafult: start)"
    echo "  start  start the jupyter server"
    echo "   stop  stop the jupyter server"
    echo " NETIF   - the network interface to start the server on (default: lo)"
    echo " PORT    - the tcp port for the server (default: 8888)"
}

function _lisa-jupyter-start {
    # Get IP address for the specified interface
    IPADDR=

    if [[ -x /sbin/ifconfig ]]; then
        IPADDR=$(/sbin/ifconfig $NETIF 2>/dev/null  | \
            awk '/inet / {print $2}' | \
            sed 's/addr://')
    fi

    if [[ -z "$IPADDR" && -x /sbin/ip ]]; then
        IPADDR=$(/sbin/ip a show dev $NETIF 2>/dev/null | \
            awk '/inet / { gsub("/.*", ""); print $2; }')
    fi

    if [[ -z "$IPADDR" ]]; then
        echo
        echo "could not determine IP address of $NETIF"
        echo
	_lisa-jupyter-usage
        return 1
    fi

    # Setup paths
    PYDIR="$LISA_HOME/ipynb"
    LOGFILE="$PYDIR/server.log"
    PIDFILE="$PYDIR/server.pid"
    URLFILE="$PYDIR/server.url"

    # Generate server URL
    TOKEN=$(cat /dev/urandom | tr -dc 'a-fA-F0-9' | fold -w 48 | head -n 1)
    URL="http://$IPADDR:$PORT/?token=$TOKEN"

    # Check if an instance is already running
    if [[ -f "$PIDFILE" ]] && pgrep -F "$PIDFILE" >/dev/null; then
        echo "Server already running:"
        echo "  " "$(cat $URLFILE)"
        xdg-open "$(cat $URLFILE)"
        return 1
    fi

    # Check required port is available (e.g. Vagrant could using the same port)
    if netstat -nlt | grep $PORT &>/dev/null; then
        echo
        echo "ERROR: required port [$PORT] already in use"
        echo "       try again with a different PORT option"
        echo
	_lisa-jupyter-usage
	return 1
    fi

    # Start the server bound to the specified interface
    echo
    echo 'Notebook server configuration:'
    echo '  URL        : ' $URL
    echo '  Folder     : ' $PYDIR
    echo '  Logfile    : ' $LOGFILE
    echo '  PYTHONPATH : '
    echo -e "\t${PYTHONPATH//:/\\n\\t}"
    cd $PYDIR
    echo
    echo -n 'Notebook server task: '
    nohup LISA_DO_NOTEBOOK_SETUP=1 jupyter lab --ip="$IPADDR" --port="$PORT" \
                      --NotebookApp.token="$TOKEN" \
                      >"$LOGFILE" 2>&1 &
    echo $! >"$PIDFILE"
    echo $URL >"$URLFILE"
    cd - >/dev/null
}

function _lisa-jupyter-stop {
    PIDFILE="$PYDIR/server.pid"
    if [[ -f "$PIDFILE" ]] && pgrep -F "$PIDFILE" >/dev/null; then
        kill "$(<"$PIDFILE")" 2>/dev/null
    fi
    rm -f "$PIDFILE" 2>/dev/null
}

function lisa-jupyter {
    CMD=${1:-start}

    if [[ -z "$2" && $USER == vagrant && -e /vagrant/shell/lisa_shell ]]; then
        # NETIF not set and we are in a vagrant environment.  Default to
        # the ethernet interface as loopback won't let you connect from your
        # host machine.
        NETIF=$(ip route | awk '/default/ { print $5 }')
    else
        NETIF=${2:-lo}
    fi

    PORT=${3:-8888}
    echo
    case "$CMD" in
    'start')
        echo "Starting Jupyter Notebooks..."
        _lisa-jupyter-start "$NETIF" "$PORT"
        ;;
    'stop')
        echo "Stopping Jupyter Notebooks..."
        _lisa-jupyter-stop
        ;;
    "help"|*)
        _lisa-jupyter-usage
        ;;
    esac
    echo
echo
}

################################################################################
# LISA Tests utility functions
################################################################################

export LISA_RESULT_ROOT=$LISA_HOME/results
export EXEKALL_ARTIFACT_ROOT=${EXEKALL_ARTIFACT_ROOT:-$LISA_RESULT_ROOT}

function lisa-test {
    exekall "$@"
}

################################################################################
# LISA Workloads utility functions
################################################################################

function lisa-wltest-init {
    export WLTEST_HOME="$LISA_HOME/tools/wltests"
    export WA_USER_DIRECTORY="$LISA_HOME/tools/wa_user_directory"
    lisa-venv-activate

    # Check that the environment is properly configured
    if [[ -z "$ANDROID_HOME" ]]; then
cat <<EOF

    ERROR: No Android SDK found!

    Please point ANDROID_HOME to your local Android SDK.

EOF
        return -1
    fi

    # Check for required external dependencies

    if which realpath &>/dev/null; then
cat <<EOF
ERROR: this script requires the realpath binary!

You can install it on Ubuntu systems with:
    $> sudo apt-get install coreutils
EOF
        return -1
    fi
}

function lisa-wltest-series {
    # Ensure the wltest environment has been configured, and get the relative
    # patch loaded in the environment
    lisa-wltest-init || exit -1

    # Run the build's provided test_series
    $WLTEST_HOME/test_series "$@"
}

################################################################################
# LISA Shell buildroot rootfs generation functions
################################################################################

function lisa-buildroot-create-rootfs {
    "$LISA_HOME/shell/lisa_buildroot_create_rootfs" "$@"
}

function lisa-buildroot-update-kernel-config {
    "$LISA_HOME/shell/lisa_buildroot_update_kernel_config" "$@"
}

################################################################################
# LISA Shell MAIN
################################################################################

# Dump out a nice LISA Shell logo
clear
echo -e "$LISASHELL_BANNER"

echo "                                                                               "
echo "                        .:: LISA Shell ::.                                     "
echo "                                                                               "
echo -ne "$LISASHELL_RESET$LISASHELL_BLUE"
cat <<EOF

Welcome to the Linux Integrated System Analysis SHELL!

version $(git rev-parse --short=11 HEAD)
LISA_HOME  : $LISA_HOME
PYTHONPATH :
EOF
echo -e "\t${PYTHONPATH//:/\\n\\t}"

cat <<EOF


Type "lisa-help" for on-line help on available commands

EOF

# Setup default SHELL text color
echo -e "$LISASHELL_DEFAULT"

# Activate the venv unless it was explicitely disabled
lisa-venv-activate

# vim :set tabstop=4 shiftwidth=4 textwidth=80 expandtab
