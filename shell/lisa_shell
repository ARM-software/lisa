#! /bin/sh
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2019, ARM Limited and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# LISA Shell: the Linux Integrated System Analysis Shell

################################################################################
# Set environment variables
################################################################################

export _DOC_ANDROID_HOME="Base folder of Android SDK installation"
export ANDROID_HOME=${ANDROID_HOME:-"$LISA_HOME/tools/android-sdk-linux"}

export _DOC_LISA_HOME="Base directory of LISA environment"

export _DOC_LISA_PYTHON="Python binary to use. This allows users to install
multiple versions in parallel, and ease testing"
export LISA_PYTHON=${LISA_PYTHON:-python3}

export _DOC_LISA_DEVMODE="By default use internal libraries"
export LISA_DEVMODE=${LISA_DEVMODE:-1}

export _DOC_LISA_PRESERVE_SHELL="By default use Lisa's PS1 and colorscheme for
the shell"
export LISA_PRESERVE_SHELL=${LISA_PRESERVE_SHELL:-0}

# Setup colors
source "$LISA_HOME/shell/lisa_colors"

export _DOC_LISA_HOST_ABI="Add some shell utilities to the PATH, based on the host ABI. Priority is determined by LISA_USE_SYSTEM_BIN"
export LISA_HOST_ABI=${LISA_HOST_ABI:-$(uname -m | sed 's/aarch64/arm64/')}

export _DOC_LISA_USE_SYSTEM_BIN="Use the system binaries if 1, will use the ones shipped with LISA if 0"
export LISA_USE_SYSTEM_BIN=${LISA_USE_SYSTEM_BIN:-0}

_ANDROID_BUILD_TOOLS=$(find "$ANDROID_HOME/build-tools/"* -maxdepth 0 -type d -print -quit)
_LISA_PATH="$LISA_HOME/shell/:$LISA_HOME/tools/$LISA_HOST_ABI:$LISA_HOME/tools/:$ANDROID_HOME/tools/:$ANDROID_HOME/platform-tools/:$_ANDROID_BUILD_TOOLS"
if [[ "$LISA_USE_SYSTEM_BIN" == 1 ]]; then
    export PATH=$PATH:$_LISA_PATH
else
    export PATH=$_LISA_PATH:$PATH
fi

export _DOC_LISA_CONF="Default configuration file for exekall"
export LISA_CONF=${LISA_CONF:-$LISA_HOME/target_conf.yml}

export _DOC_LISA_RESULT_ROOT="By default, store the results under that folder"
export LISA_RESULT_ROOT=${LISA_RESULT_ROOT:-$LISA_HOME/results}

export _DOC_EXEKALL_ARTIFACT_ROOT="Default root for exekall's artifacts"
export EXEKALL_ARTIFACT_ROOT=${EXEKALL_ARTIFACT_ROOT:-$LISA_RESULT_ROOT}

# Add our man pages
export MANPATH="$MANPATH:$LISA_HOME/doc/"

# make sure it is unset if the folder does not exist, as some other tools will
# not handle that well
[[ ! -d "$ANDROID_HOME" ]] && unset ANDROID_HOME

################################################################################
# Helpers
################################################################################

# Avoid having quotes all over the place in that script, so we define a
# function for it
function _lisa-python {
    "$LISA_PYTHON" "$@"
}

# Only clear the screen if stdout is a terminal, to avoid ASCII escape
# characters to be sent to a log file for example.
function clear {
    case "$-" in
        *i*) test -t 1 && command clear ;;
        *) ;;
    esac
}

################################################################################
# Generic LISA Shell commands
################################################################################

function lisa-help {
    man lisa
}

################################################################################
# LISA Install functions
################################################################################

# major.minor version number
PYTHON_VERSION=$(_lisa-python -c 'import sys; print("{}.{}".format(*sys.version_info))')

export _DOC_LISA_USE_VENV="1 to make lisa-install use a venv specified in
LISA_VENV_PATH, 0 otherwise"
export LISA_USE_VENV=${LISA_USE_VENV:-1}

export _DOC_LISA_VENV_PATH="Path to venv to be used by lisa-install"
export LISA_VENV_PATH=${LISA_VENV_PATH:-"$LISA_HOME/.lisa-venv-$PYTHON_VERSION"}

export _DOC_LISA_UPGRADE_VENV="1 to make lisa-install upgrade the venv specified in
LISA_VENV_PATH. If 0, lisa-install will destroy the venv and re-create anew"
export LISA_UPGRADE_VENV=${LISA_UPGRADE_VENV:-0}


# Force the shell to rescan the folders listed in $PATH
function _lisa-reload-PATH {
    # that should work for most shells (at least bash and zsh)
    hash -r
}

function _lisa-venv-create {
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        # Make sure we don't nest venv, by calling deactivate if it exists,
        # otherwise it will fail with a symlink levels errors
        lisa-venv-deactivate || return 1

        local venv_options=()
        if [[ "$LISA_UPGRADE_VENV" != 1 ]]; then
            echo "Creating LISA venv from scratch ($LISA_VENV_PATH) ..."
            venv_options+=(--clear)
        fi
        # With --clear, the folder is emptied to create a fresh environment
        _lisa-python -m venv "${venv_options[@]}" "$LISA_VENV_PATH"
    fi
}

function lisa-venv-activate {
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        # If the venv is not found, we install LISA in there
        if [[ ! -e "$LISA_VENV_PATH" ]]; then
            lisa-install || return 1
        fi

        if [[ -n "$PYTHONPATH" ]]; then
            echo "WARNING: Your PYTHONPATH is not empty, it may interfere with LISA's venv: $PYTHONPATH" >&2
        fi

        echo "Activating LISA Python $PYTHON_VERSION venv ($LISA_VENV_PATH) ..."
        VIRTUAL_ENV_DISABLE_PROMPT=1 source "$LISA_VENV_PATH/bin/activate"
    fi

    # Make sure the shell takes into account the new content of folders listed
    # in $PATH, even if we did not actually activate a venv
    _lisa-reload-PATH

    # Check if lisa-install needs to be run again, but ignore the return value
    # so it won't make activation fail just because of that
    (cd "$LISA_HOME" && check-setuppy; exit 0)
}

function lisa-venv-deactivate {
    if type deactivate &>/dev/null; then
        echo "Deactivating LISA Python venv ($LISA_VENV_PATH) ..."
        deactivate
    fi
}

function _lisa-upgrade-pip {
    # Only upgrade pip when using the venv, so we don't touch the system-wide
    # install
    if [[ "$LISA_USE_VENV" == 1 ]]; then
        echo "Upgrading pip ..."
        _lisa-python -m pip install --upgrade pip setuptools wheel
    fi
}

# Check that some prerequisites are available on the system, since they
# cannot be installed using pip in a venv
function _lisa-install-system-check {
    _lisa-python-package-check () {
        local package=$1
        local ubuntu_package=$2
        if ! _lisa-python -c "import $package" &>/dev/null; then
            echo "Missing $package Python package, it is provided by $ubuntu_package apt-get package on Ubuntu"
        fi
    }

    _lisa-python-package-check tkinter python3-tkinter
    _lisa-python-package-check ensurepip python3-venv
}

# Copy/Update lisa specific git-hook
function _lisa-copy-git-hook {
    local hook="$1"

    local hooks_dir="$(git -C "$LISA_HOME" rev-parse --git-common-dir)/hooks"
    local src="$LISA_HOME/tools/git-hooks/$hook"
    local dst="$hooks_dir/$hook"

    # Avoid overriding existing hooks unless they are provided by LISA
    if [[ ! -e "$dst" ]] || grep -q 'LISA-HOOK' "$dst"; then
        cp -v "$src" "$dst"
    else
        echo "WARNING: Could not install git hook, as it is user-provided: $src => $dst"
    fi
}

function _lisa-install-git-hooks {
	_lisa-copy-git-hook "post-checkout"
}

function lisa-install {
    _lisa-install-system-check

    _lisa-venv-create || return 1
    lisa-venv-activate || return 1
    _lisa-upgrade-pip

    # Record the point in time when we ran that install command
    (cd "$LISA_HOME" && check-setuppy --update-recorded-commit HEAD)

    # Install custom_requirements.txt first so user can override the
    # installation source of any package
    local requirements=(custom_requirements.txt)

    if [[ $(whoami) == "vagrant" ]]; then
        # Special set of requirements to workaround vagrant issue:
        # https://github.com/hashicorp/vagrant/issues/12057
        requirements+=(
            vagrant_requirements.txt
            devmode_extra_requirements.txt
        )
    elif [[ "$LISA_DEVMODE" == 1 ]]; then
        # This set of requirements will install all the shipped dependencies
        # in editable mode
        requirements+=(
            devmode_requirements.txt
            devmode_extra_requirements.txt
        )
    else
        # This one will install the packages that are developed here, but will
        # take the external dependencies from PyPI
        requirements+=(
            requirements.txt
            extra_requirements.txt
        )
    fi

    local pip_options=()
    for f in "${requirements[@]}"; do
        f="$LISA_HOME/$f"
        [[ -e "$f" ]] && pip_options+=(-r "$f")
    done

    if [[ "$LISA_UPGRADE_VENV" == 1 ]]; then
        pip_options+=(--upgrade --upgrade-strategy eager)
    fi

    echo
    echo "Installing LISA packages ..."
    echo

    # Make sure we install all packages, even if they are satisfied by the
    # system's site-packages location. This ensures we use up to date packages,
    # and that the installation process will give the same result on all
    # machines at a given point in time.
    (cd "$LISA_HOME" && _lisa-python -m pip install --no-cache-dir "${pip_options[@]}" "$@")

    # Make sure the shell has taken into account the new content of directories
    # listed in $PATH.
    _lisa-reload-PATH

    local lisa_install_versions="$LISA_HOME/.lisa-install-versions"

    # Log the version of all Python modules, so we know what is the faulty
    # version when something goes wrong
    printf "\n\n" >> "$lisa_install_versions"
    LC_ALL=C date >> "$lisa_install_versions"
    lisa-version >> "$lisa_install_versions"
    _lisa-python -m pip freeze >> "$lisa_install_versions"

    # Install some git-hooks
    _lisa-install-git-hooks
}

################################################################################
# LISA Update utility functions
################################################################################

function lisa-update-subtrees {
    echo -ne "${LISASHELL_BLUE}"
    if [[ "$LISA_DEVMODE" == 1 ]]; then
        # Force update existing modules
        echo
        echo 'Developer mode ENABLED, updating local libraries...'
        for-each-subtree.py "$LISA_HOME/external/subtrees.conf" --fetch pull --squash
        echo 'DONE'
    fi
    echo -ne "$LISASHELL_DEFAULT"
}


function lisa-log-subtree {
    subtree="$1"
    shift

    # Show the second parent (^2) of the last (-n1) merge commit (--merges)
    # touching the given subtree. This corresponds to the top-most squashed
    # commit, and gives access to all the squashed commits.
    git log "$(git rev-list HEAD --merges -n 1 -- "$subtree" )^2" "$@"
}

################################################################################
# LISA Notebooks utility functions
################################################################################

function _lisa-jupyter-start {
    # Get IP address for the specified interface
    IPADDR=

    if [[ -x /sbin/ifconfig ]]; then
	IPADDR=$(/sbin/ifconfig $NETIF 2>/dev/null  | \
	    awk '/inet / {print $2}' | \
	    grep -Eo [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)
    fi

    if [[ -z "$IPADDR" && -x /sbin/ip ]]; then
        IPADDR=$(/sbin/ip a show dev $NETIF 2>/dev/null | \
            awk '/inet / { gsub("/.*", ""); print $2; }')
    fi

    if [[ -z "$IPADDR" ]]; then
        echo
        echo "could not determine IP address of $NETIF, see man lisa"
        echo
        return 1
    fi

    # Setup paths
    PYDIR="$LISA_HOME/ipynb"
    LOGFILE="$PYDIR/server.log"
    PIDFILE="$PYDIR/server.pid"
    URLFILE="$PYDIR/server.url"

    # Generate server URL
    TOKEN=$(cat /dev/urandom | tr -dc 'a-fA-F0-9' | fold -w 48 | head -n 1)
    URL="http://$IPADDR:$PORT/?token=$TOKEN"

    # Check if an instance is already running
    if [[ -f "$PIDFILE" ]] && pgrep -F "$PIDFILE" >/dev/null; then
        echo "Server already running:"
        echo "  " "$(cat $URLFILE)"
        xdg-open "$(cat $URLFILE)"
        return 1
    fi

    # Check required port is available (e.g. Vagrant could using the same port)
    if netstat -nlt | grep $PORT &>/dev/null; then
        echo
        echo "ERROR: required port [$PORT] already in use"
        echo "       try again with a different PORT option, see man lisa"
        echo
        return 1
    fi

    # Start the server bound to the specified interface
    echo
    echo 'Notebook server configuration:'
    echo '  URL        : ' $URL
    echo '  Folder     : ' $PYDIR
    echo '  Logfile    : ' $LOGFILE
    cd $PYDIR
    echo
    echo -n 'Notebook server task: '
    nohup jupyter lab --ip="$IPADDR" --port="$PORT" \
                      --NotebookApp.token="$TOKEN" \
                      >"$LOGFILE" 2>&1 &
    echo $! >"$PIDFILE"
    echo $URL >"$URLFILE"
    cd - >/dev/null
}

function _lisa-jupyter-stop {
    PIDFILE="$PYDIR/server.pid"
    if [[ -f "$PIDFILE" ]] && pgrep -F "$PIDFILE" >/dev/null; then
        kill "$(<"$PIDFILE")" 2>/dev/null
    fi
    rm -f "$PIDFILE" 2>/dev/null
}

function lisa-jupyter {
    CMD=${1:-start}

    if [[ -z "$2" && $USER == vagrant && -e /vagrant/shell/lisa_shell ]]; then
        # NETIF not set and we are in a vagrant environment.  Default to
        # the ethernet interface as loopback won't let you connect from your
        # host machine.
        NETIF=$(ip route | awk '/default/ { print $5 }')
    else
        NETIF=${2:-lo}
    fi

    PORT=${3:-8888}
    echo
    case "$CMD" in
    'start')
        echo "Starting Jupyter Notebooks..."
        _lisa-jupyter-start "$NETIF" "$PORT"
        ;;
    'stop')
        echo "Stopping Jupyter Notebooks..."
        _lisa-jupyter-stop
        ;;
    "help"|*)
        echo "see 'man lisa'"
        ;;
    esac
    echo
echo
}

################################################################################
# LISA Workloads utility functions
################################################################################

function lisa-wltest-series {
    export WLTEST_HOME="$LISA_HOME/tools/wltests"
    export WA_USER_DIRECTORY="$LISA_HOME/tools/wa_user_directory"

    # Check that the environment is properly configured
    if [[ ! -d "$ANDROID_HOME" ]]; then
cat <<EOF

    ERROR: No Android SDK found!

    Please point ANDROID_HOME to your local Android SDK.

EOF
        return -1
    fi

    # Check for required external dependencies

    if ! which realpath &>/dev/null; then
cat <<EOF
ERROR: this script requires the realpath binary!

You can install it on Ubuntu systems with:
    $> sudo apt-get install coreutils
EOF
        return -1
    fi

    # Run the build's provided test_series
    "$WLTEST_HOME/test_series" "$@"
}

################################################################################
# LISA Shell MAIN
################################################################################

if [[ $LISA_PRESERVE_SHELL == 0 ]]; then
    # Dump out a nice LISA Shell logo
    clear
    echo -e "$LISASHELL_BANNER"

    echo "                                                                               "
    echo "                        .:: LISA Shell ::.                                     "
    echo "                                                                               "
    echo -ne "$LISASHELL_RESET"
    echo
fi

# Activate the venv unless it was explicitely disabled
lisa-venv-activate

if [[ $LISA_PRESERVE_SHELL == 0 ]]; then
    echo -ne "$LISASHELL_RESET$LISASHELL_BLUE"
    cat <<EOF

Welcome to the Linux Integrated System Analysis SHELL!

$(lisa-version)

Type "man lisa" for help on available commands
EOF

    # Setup default SHELL text color
    echo -e "$LISASHELL_DEFAULT"
else
    lisa-version
fi

# Show relevant env var
echo "Environment variables:"
env-list.py



printf "$LISASHELL_RED"
echo '
================================== ATTENTION ==================================
This version of LISA was obtained by cloning the "master" git branch.
LISA project has moved to the "main" branch.
The "master" branch will eventually be abandonned, please use the "main" branch.
===============================================================================
'

# vim: set tabstop=4 shiftwidth=4 textwidth=80 expandtab:
